
UTS_TamiyaCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b04  08003b04  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003b04  08003b04  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b04  08003b04  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003b0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000088  08003b90  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003b90  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a2f  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000299e  00000000  00000000  00030adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  00033480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  00033ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c4c  00000000  00000000  00034758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c900  00000000  00000000  0004a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070619  00000000  00000000  00056ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c72bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a0  00000000  00000000  000c7338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a48 	.word	0x08003a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003a48 	.word	0x08003a48

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 fdb5 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f002 fe70 	bl	8002e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fdcd 	bl	8000d46 <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295
 80001c4:	f000 fd95 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	200000b0 	.word	0x200000b0

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	200000b0 	.word	0x200000b0

08000220 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000228:	2300      	movs	r3, #0
 800022a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800022c:	2300      	movs	r3, #0
 800022e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000230:	2300      	movs	r3, #0
 8000232:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d101      	bne.n	8000242 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
 8000240:	e0be      	b.n	80003c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800024c:	2b00      	cmp	r3, #0
 800024e:	d109      	bne.n	8000264 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2200      	movs	r2, #0
 8000254:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2200      	movs	r2, #0
 800025a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f002 fe2e 	bl	8002ec0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f000 fbc3 	bl	80009f0 <ADC_ConversionStop_Disable>
 800026a:	4603      	mov	r3, r0
 800026c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000272:	f003 0310 	and.w	r3, r3, #16
 8000276:	2b00      	cmp	r3, #0
 8000278:	f040 8099 	bne.w	80003ae <HAL_ADC_Init+0x18e>
 800027c:	7dfb      	ldrb	r3, [r7, #23]
 800027e:	2b00      	cmp	r3, #0
 8000280:	f040 8095 	bne.w	80003ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000288:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800028c:	f023 0302 	bic.w	r3, r3, #2
 8000290:	f043 0202 	orr.w	r2, r3, #2
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	7b1b      	ldrb	r3, [r3, #12]
 80002a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002b8:	d003      	beq.n	80002c2 <HAL_ADC_Init+0xa2>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d102      	bne.n	80002c8 <HAL_ADC_Init+0xa8>
 80002c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c6:	e000      	b.n	80002ca <HAL_ADC_Init+0xaa>
 80002c8:	2300      	movs	r3, #0
 80002ca:	693a      	ldr	r2, [r7, #16]
 80002cc:	4313      	orrs	r3, r2
 80002ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	7d1b      	ldrb	r3, [r3, #20]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d119      	bne.n	800030c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	7b1b      	ldrb	r3, [r3, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d109      	bne.n	80002f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	035a      	lsls	r2, r3, #13
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	4313      	orrs	r3, r2
 80002ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002f0:	613b      	str	r3, [r7, #16]
 80002f2:	e00b      	b.n	800030c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f8:	f043 0220 	orr.w	r2, r3, #32
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000304:	f043 0201 	orr.w	r2, r3, #1
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	693a      	ldr	r2, [r7, #16]
 800031c:	430a      	orrs	r2, r1
 800031e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <HAL_ADC_Init+0x1a8>)
 8000328:	4013      	ands	r3, r2
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6812      	ldr	r2, [r2, #0]
 800032e:	68b9      	ldr	r1, [r7, #8]
 8000330:	430b      	orrs	r3, r1
 8000332:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800033c:	d003      	beq.n	8000346 <HAL_ADC_Init+0x126>
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d104      	bne.n	8000350 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	691b      	ldr	r3, [r3, #16]
 800034a:	3b01      	subs	r3, #1
 800034c:	051b      	lsls	r3, r3, #20
 800034e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000356:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	430a      	orrs	r2, r1
 8000362:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	689a      	ldr	r2, [r3, #8]
 800036a:	4b18      	ldr	r3, [pc, #96]	; (80003cc <HAL_ADC_Init+0x1ac>)
 800036c:	4013      	ands	r3, r2
 800036e:	68ba      	ldr	r2, [r7, #8]
 8000370:	429a      	cmp	r2, r3
 8000372:	d10b      	bne.n	800038c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800037e:	f023 0303 	bic.w	r3, r3, #3
 8000382:	f043 0201 	orr.w	r2, r3, #1
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800038a:	e018      	b.n	80003be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000390:	f023 0312 	bic.w	r3, r3, #18
 8000394:	f043 0210 	orr.w	r2, r3, #16
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a0:	f043 0201 	orr.w	r2, r3, #1
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003a8:	2301      	movs	r3, #1
 80003aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ac:	e007      	b.n	80003be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b2:	f043 0210 	orr.w	r2, r3, #16
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ba:	2301      	movs	r3, #1
 80003bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003be:	7dfb      	ldrb	r3, [r7, #23]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3718      	adds	r7, #24
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	ffe1f7fd 	.word	0xffe1f7fd
 80003cc:	ff1f0efe 	.word	0xff1f0efe

080003d0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003dc:	2300      	movs	r3, #0
 80003de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a64      	ldr	r2, [pc, #400]	; (8000578 <HAL_ADC_Start_DMA+0x1a8>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d004      	beq.n	80003f4 <HAL_ADC_Start_DMA+0x24>
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a63      	ldr	r2, [pc, #396]	; (800057c <HAL_ADC_Start_DMA+0x1ac>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <HAL_ADC_Start_DMA+0x32>
 80003f4:	4b60      	ldr	r3, [pc, #384]	; (8000578 <HAL_ADC_Start_DMA+0x1a8>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	f040 80b3 	bne.w	8000568 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000408:	2b01      	cmp	r3, #1
 800040a:	d101      	bne.n	8000410 <HAL_ADC_Start_DMA+0x40>
 800040c:	2302      	movs	r3, #2
 800040e:	e0ae      	b.n	800056e <HAL_ADC_Start_DMA+0x19e>
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	2201      	movs	r2, #1
 8000414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f000 fa97 	bl	800094c <ADC_Enable>
 800041e:	4603      	mov	r3, r0
 8000420:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000422:	7dfb      	ldrb	r3, [r7, #23]
 8000424:	2b00      	cmp	r3, #0
 8000426:	f040 809a 	bne.w	800055e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a4e      	ldr	r2, [pc, #312]	; (800057c <HAL_ADC_Start_DMA+0x1ac>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d105      	bne.n	8000454 <HAL_ADC_Start_DMA+0x84>
 8000448:	4b4b      	ldr	r3, [pc, #300]	; (8000578 <HAL_ADC_Start_DMA+0x1a8>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d115      	bne.n	8000480 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000458:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800046a:	2b00      	cmp	r3, #0
 800046c:	d026      	beq.n	80004bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000472:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000476:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800047e:	e01d      	b.n	80004bc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000484:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a39      	ldr	r2, [pc, #228]	; (8000578 <HAL_ADC_Start_DMA+0x1a8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d004      	beq.n	80004a0 <HAL_ADC_Start_DMA+0xd0>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a38      	ldr	r2, [pc, #224]	; (800057c <HAL_ADC_Start_DMA+0x1ac>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d10d      	bne.n	80004bc <HAL_ADC_Start_DMA+0xec>
 80004a0:	4b35      	ldr	r3, [pc, #212]	; (8000578 <HAL_ADC_Start_DMA+0x1a8>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d007      	beq.n	80004bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d006      	beq.n	80004d6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004cc:	f023 0206 	bic.w	r2, r3, #6
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004d4:	e002      	b.n	80004dc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2200      	movs	r2, #0
 80004da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a25      	ldr	r2, [pc, #148]	; (8000580 <HAL_ADC_Start_DMA+0x1b0>)
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	6a1b      	ldr	r3, [r3, #32]
 80004f0:	4a24      	ldr	r2, [pc, #144]	; (8000584 <HAL_ADC_Start_DMA+0x1b4>)
 80004f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	4a23      	ldr	r2, [pc, #140]	; (8000588 <HAL_ADC_Start_DMA+0x1b8>)
 80004fa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f06f 0202 	mvn.w	r2, #2
 8000504:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000514:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	6a18      	ldr	r0, [r3, #32]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	334c      	adds	r3, #76	; 0x4c
 8000520:	4619      	mov	r1, r3
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f000 fc75 	bl	8000e14 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000534:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000538:	d108      	bne.n	800054c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000548:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800054a:	e00f      	b.n	800056c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800055a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800055c:	e006      	b.n	800056c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2200      	movs	r2, #0
 8000562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000566:	e001      	b.n	800056c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000568:	2301      	movs	r3, #1
 800056a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800056c:	7dfb      	ldrb	r3, [r7, #23]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40012400 	.word	0x40012400
 800057c:	40012800 	.word	0x40012800
 8000580:	08000a65 	.word	0x08000a65
 8000584:	08000ae1 	.word	0x08000ae1
 8000588:	08000afd 	.word	0x08000afd

0800058c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f003 0320 	and.w	r3, r3, #32
 800059e:	2b20      	cmp	r3, #32
 80005a0:	d140      	bne.n	8000624 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 0302 	and.w	r3, r3, #2
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d139      	bne.n	8000624 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b4:	f003 0310 	and.w	r3, r3, #16
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d105      	bne.n	80005c8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80005d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80005d6:	d11d      	bne.n	8000614 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d119      	bne.n	8000614 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f022 0220 	bic.w	r2, r2, #32
 80005ee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d105      	bne.n	8000614 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800060c:	f043 0201 	orr.w	r2, r3, #1
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f87c 	bl	8000712 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f06f 0212 	mvn.w	r2, #18
 8000622:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	2b80      	cmp	r3, #128	; 0x80
 8000630:	d14f      	bne.n	80006d2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	2b04      	cmp	r3, #4
 800063e:	d148      	bne.n	80006d2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	2b00      	cmp	r3, #0
 800064a:	d105      	bne.n	8000658 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000650:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000662:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000666:	d012      	beq.n	800068e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000672:	2b00      	cmp	r3, #0
 8000674:	d125      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000680:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000684:	d11d      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800068a:	2b00      	cmp	r3, #0
 800068c:	d119      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800069c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ba:	f043 0201 	orr.w	r2, r3, #1
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 fa34 	bl	8000b30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f06f 020c 	mvn.w	r2, #12
 80006d0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006dc:	2b40      	cmp	r3, #64	; 0x40
 80006de:	d114      	bne.n	800070a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d10d      	bne.n	800070a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f81b 	bl	8000736 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f06f 0201 	mvn.w	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
	...

0800075c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000774:	2b01      	cmp	r3, #1
 8000776:	d101      	bne.n	800077c <HAL_ADC_ConfigChannel+0x20>
 8000778:	2302      	movs	r3, #2
 800077a:	e0dc      	b.n	8000936 <HAL_ADC_ConfigChannel+0x1da>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b06      	cmp	r3, #6
 800078a:	d81c      	bhi.n	80007c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	3b05      	subs	r3, #5
 800079e:	221f      	movs	r2, #31
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4019      	ands	r1, r3
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	4613      	mov	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	3b05      	subs	r3, #5
 80007b8:	fa00 f203 	lsl.w	r2, r0, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	430a      	orrs	r2, r1
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
 80007c4:	e03c      	b.n	8000840 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b0c      	cmp	r3, #12
 80007cc:	d81c      	bhi.n	8000808 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	3b23      	subs	r3, #35	; 0x23
 80007e0:	221f      	movs	r2, #31
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	4019      	ands	r1, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	3b23      	subs	r3, #35	; 0x23
 80007fa:	fa00 f203 	lsl.w	r2, r0, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	430a      	orrs	r2, r1
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
 8000806:	e01b      	b.n	8000840 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685a      	ldr	r2, [r3, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	3b41      	subs	r3, #65	; 0x41
 800081a:	221f      	movs	r2, #31
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	4019      	ands	r1, r3
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	6818      	ldr	r0, [r3, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	3b41      	subs	r3, #65	; 0x41
 8000834:	fa00 f203 	lsl.w	r2, r0, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	430a      	orrs	r2, r1
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b09      	cmp	r3, #9
 8000846:	d91c      	bls.n	8000882 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	68d9      	ldr	r1, [r3, #12]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	3b1e      	subs	r3, #30
 800085a:	2207      	movs	r2, #7
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	4019      	ands	r1, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	6898      	ldr	r0, [r3, #8]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	3b1e      	subs	r3, #30
 8000874:	fa00 f203 	lsl.w	r2, r0, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	430a      	orrs	r2, r1
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	e019      	b.n	80008b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6919      	ldr	r1, [r3, #16]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4613      	mov	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4413      	add	r3, r2
 8000892:	2207      	movs	r2, #7
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	4019      	ands	r1, r3
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	6898      	ldr	r0, [r3, #8]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	fa00 f203 	lsl.w	r2, r0, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	d003      	beq.n	80008c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008c2:	2b11      	cmp	r3, #17
 80008c4:	d132      	bne.n	800092c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_ADC_ConfigChannel+0x1e4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d125      	bne.n	800091c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d126      	bne.n	800092c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008ec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b10      	cmp	r3, #16
 80008f4:	d11a      	bne.n	800092c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_ADC_ConfigChannel+0x1e8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <HAL_ADC_ConfigChannel+0x1ec>)
 80008fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000900:	0c9a      	lsrs	r2, r3, #18
 8000902:	4613      	mov	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4413      	add	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800090c:	e002      	b.n	8000914 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3b01      	subs	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f9      	bne.n	800090e <HAL_ADC_ConfigChannel+0x1b2>
 800091a:	e007      	b.n	800092c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	f043 0220 	orr.w	r2, r3, #32
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	40012400 	.word	0x40012400
 8000944:	2000001c 	.word	0x2000001c
 8000948:	431bde83 	.word	0x431bde83

0800094c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	2b01      	cmp	r3, #1
 8000968:	d039      	beq.n	80009de <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f042 0201 	orr.w	r2, r2, #1
 8000978:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <ADC_Enable+0x9c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <ADC_Enable+0xa0>)
 8000980:	fba2 2303 	umull	r2, r3, r2, r3
 8000984:	0c9b      	lsrs	r3, r3, #18
 8000986:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000988:	e002      	b.n	8000990 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	3b01      	subs	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1f9      	bne.n	800098a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000996:	f7ff fc39 	bl	800020c <HAL_GetTick>
 800099a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800099c:	e018      	b.n	80009d0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800099e:	f7ff fc35 	bl	800020c <HAL_GetTick>
 80009a2:	4602      	mov	r2, r0
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d911      	bls.n	80009d0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b0:	f043 0210 	orr.w	r2, r3, #16
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	f043 0201 	orr.w	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e007      	b.n	80009e0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d1df      	bne.n	800099e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000001c 	.word	0x2000001c
 80009ec:	431bde83 	.word	0x431bde83

080009f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d127      	bne.n	8000a5a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0201 	bic.w	r2, r2, #1
 8000a18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a1a:	f7ff fbf7 	bl	800020c <HAL_GetTick>
 8000a1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a20:	e014      	b.n	8000a4c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a22:	f7ff fbf3 	bl	800020c <HAL_GetTick>
 8000a26:	4602      	mov	r2, r0
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d90d      	bls.n	8000a4c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a34:	f043 0210 	orr.w	r2, r3, #16
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a40:	f043 0201 	orr.w	r2, r3, #1
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e007      	b.n	8000a5c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d0e3      	beq.n	8000a22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d127      	bne.n	8000ace <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a94:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a98:	d115      	bne.n	8000ac6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d111      	bne.n	8000ac6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d105      	bne.n	8000ac6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	f043 0201 	orr.w	r2, r3, #1
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f7ff fe23 	bl	8000712 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000acc:	e004      	b.n	8000ad8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	4798      	blx	r3
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f7ff fe18 	bl	8000724 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1a:	f043 0204 	orr.w	r2, r3, #4
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff fe10 	bl	8000748 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
	...

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0b      	blt.n	8000bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4906      	ldr	r1, [pc, #24]	; (8000bdc <__NVIC_EnableIRQ+0x34>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff90 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff2d 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff42 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff90 	bl	8000c34 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5f 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff35 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffa2 	bl	8000c98 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e043      	b.n	8000dfe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_DMA_Init+0xa8>)
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <HAL_DMA_Init+0xac>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	009a      	lsls	r2, r3, #2
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <HAL_DMA_Init+0xb0>)
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2202      	movs	r2, #2
 8000d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000daa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000dae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	bffdfff8 	.word	0xbffdfff8
 8000e0c:	cccccccd 	.word	0xcccccccd
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <HAL_DMA_Start_IT+0x20>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e04a      	b.n	8000eca <HAL_DMA_Start_IT+0xb6>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d13a      	bne.n	8000ebc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2200      	movs	r2, #0
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0201 	bic.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f000 f938 	bl	80010e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d008      	beq.n	8000e8a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 020e 	orr.w	r2, r2, #14
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e00f      	b.n	8000eaa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0204 	bic.w	r2, r2, #4
 8000e98:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f042 020a 	orr.w	r2, r2, #10
 8000ea8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f042 0201 	orr.w	r2, r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e005      	b.n	8000ec8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d04f      	beq.n	8000f9c <HAL_DMA_IRQHandler+0xc8>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d04a      	beq.n	8000f9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d107      	bne.n	8000f24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0204 	bic.w	r2, r2, #4
 8000f22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a66      	ldr	r2, [pc, #408]	; (80010c4 <HAL_DMA_IRQHandler+0x1f0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d029      	beq.n	8000f82 <HAL_DMA_IRQHandler+0xae>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <HAL_DMA_IRQHandler+0x1f4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d022      	beq.n	8000f7e <HAL_DMA_IRQHandler+0xaa>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a63      	ldr	r2, [pc, #396]	; (80010cc <HAL_DMA_IRQHandler+0x1f8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01a      	beq.n	8000f78 <HAL_DMA_IRQHandler+0xa4>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a62      	ldr	r2, [pc, #392]	; (80010d0 <HAL_DMA_IRQHandler+0x1fc>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d012      	beq.n	8000f72 <HAL_DMA_IRQHandler+0x9e>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a60      	ldr	r2, [pc, #384]	; (80010d4 <HAL_DMA_IRQHandler+0x200>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00a      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x98>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a5f      	ldr	r2, [pc, #380]	; (80010d8 <HAL_DMA_IRQHandler+0x204>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d102      	bne.n	8000f66 <HAL_DMA_IRQHandler+0x92>
 8000f60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f64:	e00e      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f6a:	e00b      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f70:	e008      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f76:	e005      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7c:	e002      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f7e:	2340      	movs	r3, #64	; 0x40
 8000f80:	e000      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f82:	2304      	movs	r3, #4
 8000f84:	4a55      	ldr	r2, [pc, #340]	; (80010dc <HAL_DMA_IRQHandler+0x208>)
 8000f86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 8094 	beq.w	80010ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f9a:	e08e      	b.n	80010ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d056      	beq.n	800105a <HAL_DMA_IRQHandler+0x186>
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d051      	beq.n	800105a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0320 	and.w	r3, r3, #32
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10b      	bne.n	8000fdc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 020a 	bic.w	r2, r2, #10
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <HAL_DMA_IRQHandler+0x1f0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d029      	beq.n	800103a <HAL_DMA_IRQHandler+0x166>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a37      	ldr	r2, [pc, #220]	; (80010c8 <HAL_DMA_IRQHandler+0x1f4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d022      	beq.n	8001036 <HAL_DMA_IRQHandler+0x162>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a35      	ldr	r2, [pc, #212]	; (80010cc <HAL_DMA_IRQHandler+0x1f8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01a      	beq.n	8001030 <HAL_DMA_IRQHandler+0x15c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a34      	ldr	r2, [pc, #208]	; (80010d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d012      	beq.n	800102a <HAL_DMA_IRQHandler+0x156>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_DMA_IRQHandler+0x200>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00a      	beq.n	8001024 <HAL_DMA_IRQHandler+0x150>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_DMA_IRQHandler+0x204>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d102      	bne.n	800101e <HAL_DMA_IRQHandler+0x14a>
 8001018:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800101c:	e00e      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 800101e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001022:	e00b      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 8001024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001028:	e008      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 800102a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102e:	e005      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 8001030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001034:	e002      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 8001036:	2320      	movs	r3, #32
 8001038:	e000      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 800103a:	2302      	movs	r3, #2
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <HAL_DMA_IRQHandler+0x208>)
 800103e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	2b00      	cmp	r3, #0
 800104e:	d034      	beq.n	80010ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001058:	e02f      	b.n	80010ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	2208      	movs	r2, #8
 8001060:	409a      	lsls	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d028      	beq.n	80010bc <HAL_DMA_IRQHandler+0x1e8>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d023      	beq.n	80010bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 020e 	bic.w	r2, r2, #14
 8001082:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4798      	blx	r3
    }
  }
  return;
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
}
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40020008 	.word	0x40020008
 80010c8:	4002001c 	.word	0x4002001c
 80010cc:	40020030 	.word	0x40020030
 80010d0:	40020044 	.word	0x40020044
 80010d4:	40020058 	.word	0x40020058
 80010d8:	4002006c 	.word	0x4002006c
 80010dc:	40020000 	.word	0x40020000

080010e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b10      	cmp	r3, #16
 800110c:	d108      	bne.n	8001120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800111e:	e007      	b.n	8001130 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	60da      	str	r2, [r3, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b08b      	sub	sp, #44	; 0x2c
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	e127      	b.n	80013a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001150:	2201      	movs	r2, #1
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8116 	bne.w	800139a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b12      	cmp	r3, #18
 8001174:	d034      	beq.n	80011e0 <HAL_GPIO_Init+0xa4>
 8001176:	2b12      	cmp	r3, #18
 8001178:	d80d      	bhi.n	8001196 <HAL_GPIO_Init+0x5a>
 800117a:	2b02      	cmp	r3, #2
 800117c:	d02b      	beq.n	80011d6 <HAL_GPIO_Init+0x9a>
 800117e:	2b02      	cmp	r3, #2
 8001180:	d804      	bhi.n	800118c <HAL_GPIO_Init+0x50>
 8001182:	2b00      	cmp	r3, #0
 8001184:	d031      	beq.n	80011ea <HAL_GPIO_Init+0xae>
 8001186:	2b01      	cmp	r3, #1
 8001188:	d01c      	beq.n	80011c4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800118a:	e048      	b.n	800121e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800118c:	2b03      	cmp	r3, #3
 800118e:	d043      	beq.n	8001218 <HAL_GPIO_Init+0xdc>
 8001190:	2b11      	cmp	r3, #17
 8001192:	d01b      	beq.n	80011cc <HAL_GPIO_Init+0x90>
          break;
 8001194:	e043      	b.n	800121e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001196:	4a89      	ldr	r2, [pc, #548]	; (80013bc <HAL_GPIO_Init+0x280>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d026      	beq.n	80011ea <HAL_GPIO_Init+0xae>
 800119c:	4a87      	ldr	r2, [pc, #540]	; (80013bc <HAL_GPIO_Init+0x280>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d806      	bhi.n	80011b0 <HAL_GPIO_Init+0x74>
 80011a2:	4a87      	ldr	r2, [pc, #540]	; (80013c0 <HAL_GPIO_Init+0x284>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d020      	beq.n	80011ea <HAL_GPIO_Init+0xae>
 80011a8:	4a86      	ldr	r2, [pc, #536]	; (80013c4 <HAL_GPIO_Init+0x288>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01d      	beq.n	80011ea <HAL_GPIO_Init+0xae>
          break;
 80011ae:	e036      	b.n	800121e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011b0:	4a85      	ldr	r2, [pc, #532]	; (80013c8 <HAL_GPIO_Init+0x28c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0xae>
 80011b6:	4a85      	ldr	r2, [pc, #532]	; (80013cc <HAL_GPIO_Init+0x290>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d016      	beq.n	80011ea <HAL_GPIO_Init+0xae>
 80011bc:	4a84      	ldr	r2, [pc, #528]	; (80013d0 <HAL_GPIO_Init+0x294>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0xae>
          break;
 80011c2:	e02c      	b.n	800121e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	623b      	str	r3, [r7, #32]
          break;
 80011ca:	e028      	b.n	800121e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	3304      	adds	r3, #4
 80011d2:	623b      	str	r3, [r7, #32]
          break;
 80011d4:	e023      	b.n	800121e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	3308      	adds	r3, #8
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e01e      	b.n	800121e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	330c      	adds	r3, #12
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e019      	b.n	800121e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011f2:	2304      	movs	r3, #4
 80011f4:	623b      	str	r3, [r7, #32]
          break;
 80011f6:	e012      	b.n	800121e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d105      	bne.n	800120c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001200:	2308      	movs	r3, #8
 8001202:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	611a      	str	r2, [r3, #16]
          break;
 800120a:	e008      	b.n	800121e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800120c:	2308      	movs	r3, #8
 800120e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	615a      	str	r2, [r3, #20]
          break;
 8001216:	e002      	b.n	800121e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
          break;
 800121c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2bff      	cmp	r3, #255	; 0xff
 8001222:	d801      	bhi.n	8001228 <HAL_GPIO_Init+0xec>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	e001      	b.n	800122c <HAL_GPIO_Init+0xf0>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3304      	adds	r3, #4
 800122c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2bff      	cmp	r3, #255	; 0xff
 8001232:	d802      	bhi.n	800123a <HAL_GPIO_Init+0xfe>
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	e002      	b.n	8001240 <HAL_GPIO_Init+0x104>
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	3b08      	subs	r3, #8
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	210f      	movs	r1, #15
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	401a      	ands	r2, r3
 8001252:	6a39      	ldr	r1, [r7, #32]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	431a      	orrs	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8096 	beq.w	800139a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800126e:	4b59      	ldr	r3, [pc, #356]	; (80013d4 <HAL_GPIO_Init+0x298>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <HAL_GPIO_Init+0x298>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	4b56      	ldr	r3, [pc, #344]	; (80013d4 <HAL_GPIO_Init+0x298>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001286:	4a54      	ldr	r2, [pc, #336]	; (80013d8 <HAL_GPIO_Init+0x29c>)
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4013      	ands	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <HAL_GPIO_Init+0x2a0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x19e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_GPIO_Init+0x2a4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x19a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a49      	ldr	r2, [pc, #292]	; (80013e4 <HAL_GPIO_Init+0x2a8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x196>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <HAL_GPIO_Init+0x2ac>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x192>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x1a0>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x1a0>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x1a0>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x1a0>
 80012da:	2300      	movs	r3, #0
 80012dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ec:	493a      	ldr	r1, [pc, #232]	; (80013d8 <HAL_GPIO_Init+0x29c>)
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4938      	ldr	r1, [pc, #224]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	43db      	mvns	r3, r3
 800131c:	4933      	ldr	r1, [pc, #204]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 800131e:	4013      	ands	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	492e      	ldr	r1, [pc, #184]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
 800133a:	e006      	b.n	800134a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	43db      	mvns	r3, r3
 8001344:	4929      	ldr	r1, [pc, #164]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001346:	4013      	ands	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4924      	ldr	r1, [pc, #144]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
 8001362:	e006      	b.n	8001372 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	43db      	mvns	r3, r3
 800136c:	491f      	ldr	r1, [pc, #124]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 800136e:	4013      	ands	r3, r2
 8001370:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	491a      	ldr	r1, [pc, #104]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	60cb      	str	r3, [r1, #12]
 800138a:	e006      	b.n	800139a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	43db      	mvns	r3, r3
 8001394:	4915      	ldr	r1, [pc, #84]	; (80013ec <HAL_GPIO_Init+0x2b0>)
 8001396:	4013      	ands	r3, r2
 8001398:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	3301      	adds	r3, #1
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	fa22 f303 	lsr.w	r3, r2, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f47f aed0 	bne.w	8001150 <HAL_GPIO_Init+0x14>
  }
}
 80013b0:	bf00      	nop
 80013b2:	372c      	adds	r7, #44	; 0x2c
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	10210000 	.word	0x10210000
 80013c0:	10110000 	.word	0x10110000
 80013c4:	10120000 	.word	0x10120000
 80013c8:	10310000 	.word	0x10310000
 80013cc:	10320000 	.word	0x10320000
 80013d0:	10220000 	.word	0x10220000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000
 80013dc:	40010800 	.word	0x40010800
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	40011000 	.word	0x40011000
 80013e8:	40011400 	.word	0x40011400
 80013ec:	40010400 	.word	0x40010400

080013f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e001      	b.n	8001412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	807b      	strh	r3, [r7, #2]
 800142a:	4613      	mov	r3, r2
 800142c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800142e:	787b      	ldrb	r3, [r7, #1]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001434:	887a      	ldrh	r2, [r7, #2]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800143a:	e003      	b.n	8001444 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	041a      	lsls	r2, r3, #16
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
	...

08001450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e26c      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8087 	beq.w	800157e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001470:	4b92      	ldr	r3, [pc, #584]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b04      	cmp	r3, #4
 800147a:	d00c      	beq.n	8001496 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800147c:	4b8f      	ldr	r3, [pc, #572]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b08      	cmp	r3, #8
 8001486:	d112      	bne.n	80014ae <HAL_RCC_OscConfig+0x5e>
 8001488:	4b8c      	ldr	r3, [pc, #560]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d10b      	bne.n	80014ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001496:	4b89      	ldr	r3, [pc, #548]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d06c      	beq.n	800157c <HAL_RCC_OscConfig+0x12c>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d168      	bne.n	800157c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e246      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x76>
 80014b8:	4b80      	ldr	r3, [pc, #512]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a7f      	ldr	r2, [pc, #508]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e02e      	b.n	8001524 <HAL_RCC_OscConfig+0xd4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x98>
 80014ce:	4b7b      	ldr	r3, [pc, #492]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7a      	ldr	r2, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b78      	ldr	r3, [pc, #480]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a77      	ldr	r2, [pc, #476]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0xd4>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0xbc>
 80014f2:	4b72      	ldr	r3, [pc, #456]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a71      	ldr	r2, [pc, #452]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b6f      	ldr	r3, [pc, #444]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6e      	ldr	r2, [pc, #440]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xd4>
 800150c:	4b6b      	ldr	r3, [pc, #428]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a6a      	ldr	r2, [pc, #424]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b68      	ldr	r3, [pc, #416]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a67      	ldr	r2, [pc, #412]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7fe fe6e 	bl	800020c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7fe fe6a 	bl	800020c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1fa      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b5d      	ldr	r3, [pc, #372]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xe4>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7fe fe5a 	bl	800020c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7fe fe56 	bl	800020c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1e6      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x10c>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d063      	beq.n	8001652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158a:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11c      	bne.n	80015dc <HAL_RCC_OscConfig+0x18c>
 80015a2:	4b46      	ldr	r3, [pc, #280]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	4b43      	ldr	r3, [pc, #268]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x176>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1ba      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4939      	ldr	r1, [pc, #228]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	e03a      	b.n	8001652 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7fe fe0f 	bl	800020c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7fe fe0b 	bl	800020c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e19b      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4927      	ldr	r1, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e015      	b.n	8001652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7fe fdee 	bl	800020c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001634:	f7fe fdea 	bl	800020c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e17a      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03a      	beq.n	80016d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d019      	beq.n	800169a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_RCC_OscConfig+0x274>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7fe fdce 	bl	800020c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7fe fdca 	bl	800020c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e15a      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f000 fada 	bl	8001c4c <RCC_Delay>
 8001698:	e01c      	b.n	80016d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_OscConfig+0x274>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a0:	f7fe fdb4 	bl	800020c <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	e00f      	b.n	80016c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a8:	f7fe fdb0 	bl	800020c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d908      	bls.n	80016c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e140      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	42420000 	.word	0x42420000
 80016c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	4b9e      	ldr	r3, [pc, #632]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e9      	bne.n	80016a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80a6 	beq.w	800182e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	4b97      	ldr	r3, [pc, #604]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10d      	bne.n	800170e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b94      	ldr	r3, [pc, #592]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a93      	ldr	r2, [pc, #588]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b91      	ldr	r3, [pc, #580]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b8e      	ldr	r3, [pc, #568]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171a:	4b8b      	ldr	r3, [pc, #556]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a8a      	ldr	r2, [pc, #552]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7fe fd71 	bl	800020c <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7fe fd6d 	bl	800020c <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b64      	cmp	r3, #100	; 0x64
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0fd      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x312>
 8001754:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a7a      	ldr	r2, [pc, #488]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6213      	str	r3, [r2, #32]
 8001760:	e02d      	b.n	80017be <HAL_RCC_OscConfig+0x36e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x334>
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a75      	ldr	r2, [pc, #468]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a72      	ldr	r2, [pc, #456]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	6213      	str	r3, [r2, #32]
 8001782:	e01c      	b.n	80017be <HAL_RCC_OscConfig+0x36e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x356>
 800178c:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a6c      	ldr	r2, [pc, #432]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a69      	ldr	r2, [pc, #420]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	e00b      	b.n	80017be <HAL_RCC_OscConfig+0x36e>
 80017a6:	4b67      	ldr	r3, [pc, #412]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a66      	ldr	r2, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6213      	str	r3, [r2, #32]
 80017b2:	4b64      	ldr	r3, [pc, #400]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a63      	ldr	r2, [pc, #396]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d015      	beq.n	80017f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7fe fd21 	bl	800020c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7fe fd1d 	bl	800020c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0ab      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	4b57      	ldr	r3, [pc, #348]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ee      	beq.n	80017ce <HAL_RCC_OscConfig+0x37e>
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7fe fd0b 	bl	800020c <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7fe fd07 	bl	800020c <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e095      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d105      	bne.n	800182e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001822:	4b48      	ldr	r3, [pc, #288]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	4a47      	ldr	r2, [pc, #284]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8081 	beq.w	800193a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001838:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d061      	beq.n	8001908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d146      	bne.n	80018da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_RCC_OscConfig+0x4fc>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7fe fcdb 	bl	800020c <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7fe fcd7 	bl	800020c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e067      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001880:	d108      	bne.n	8001894 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	492d      	ldr	r1, [pc, #180]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a19      	ldr	r1, [r3, #32]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	430b      	orrs	r3, r1
 80018a6:	4927      	ldr	r1, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <HAL_RCC_OscConfig+0x4fc>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7fe fcab 	bl	800020c <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7fe fca7 	bl	800020c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e037      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x46a>
 80018d8:	e02f      	b.n	800193a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_RCC_OscConfig+0x4fc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7fe fc94 	bl	800020c <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7fe fc90 	bl	800020c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e020      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x498>
 8001906:	e018      	b.n	800193a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e013      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	429a      	cmp	r2, r3
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	40007000 	.word	0x40007000
 800194c:	42420060 	.word	0x42420060

08001950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0d0      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d910      	bls.n	8001994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b67      	ldr	r3, [pc, #412]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 0207 	bic.w	r2, r3, #7
 800197a:	4965      	ldr	r1, [pc, #404]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0b8      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d0:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	494d      	ldr	r1, [pc, #308]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d040      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d115      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e07f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e073      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06b      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4936      	ldr	r1, [pc, #216]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7fe fbe4 	bl	800020c <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7fe fbe0 	bl	800020c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e053      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d210      	bcs.n	8001aa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	4922      	ldr	r1, [pc, #136]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e032      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4916      	ldr	r1, [pc, #88]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	490e      	ldr	r1, [pc, #56]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ade:	f000 f821 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	fa21 f303 	lsr.w	r3, r1, r3
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x1cc>)
 8001af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_ClockConfig+0x1d0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fb42 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08003ab8 	.word	0x08003ab8
 8001b1c:	2000001c 	.word	0x2000001c
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b24:	b490      	push	{r4, r7}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b2c:	1d3c      	adds	r4, r7, #4
 8001b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x40>
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x46>
 8001b62:	e02d      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b66:	623b      	str	r3, [r7, #32]
      break;
 8001b68:	e02d      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	0c9b      	lsrs	r3, r3, #18
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b76:	4413      	add	r3, r2
 8001b78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	0c5b      	lsrs	r3, r3, #17
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b96:	4413      	add	r3, r2
 8001b98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba2:	fb02 f203 	mul.w	r2, r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
 8001bae:	e004      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	623b      	str	r3, [r7, #32]
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc2:	623b      	str	r3, [r7, #32]
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc90      	pop	{r4, r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	08003a60 	.word	0x08003a60
 8001bd8:	08003a70 	.word	0x08003a70
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	007a1200 	.word	0x007a1200
 8001be4:	003d0900 	.word	0x003d0900

08001be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	2000001c 	.word	0x2000001c

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c00:	f7ff fff2 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c04:	4601      	mov	r1, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4a03      	ldr	r2, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08003ac8 	.word	0x08003ac8

08001c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4601      	mov	r1, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0adb      	lsrs	r3, r3, #11
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08003ac8 	.word	0x08003ac8

08001c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <RCC_Delay+0x34>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <RCC_Delay+0x38>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0a5b      	lsrs	r3, r3, #9
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c68:	bf00      	nop
  }
  while (Delay --);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f9      	bne.n	8001c68 <RCC_Delay+0x1c>
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	2000001c 	.word	0x2000001c
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d07d      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca8:	4b4f      	ldr	r3, [pc, #316]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	4a4b      	ldr	r2, [pc, #300]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	61d3      	str	r3, [r2, #28]
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d118      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a42      	ldr	r2, [pc, #264]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce8:	f7fe fa90 	bl	800020c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	e008      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf0:	f7fe fa8c 	bl	800020c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e06d      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d0e:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d02e      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d027      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d42:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d014      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe fa5b 	bl	800020c <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fa57 	bl	800020c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e036      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0ee      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4917      	ldr	r1, [pc, #92]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	490b      	ldr	r1, [pc, #44]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4904      	ldr	r1, [pc, #16]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
 8001df0:	42420440 	.word	0x42420440

08001df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e03f      	b.n	8001e86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f001 f8c0 	bl	8002fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2224      	movs	r2, #36	; 0x24
 8001e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f90b 	bl	8002054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b088      	sub	sp, #32
 8001e92:	af02      	add	r7, sp, #8
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	f040 8083 	bne.w	8001fb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_UART_Transmit+0x2e>
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e07b      	b.n	8001fb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_UART_Transmit+0x40>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e074      	b.n	8001fb8 <HAL_UART_Transmit+0x12a>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2221      	movs	r2, #33	; 0x21
 8001ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ee4:	f7fe f992 	bl	800020c <HAL_GetTick>
 8001ee8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	88fa      	ldrh	r2, [r7, #6]
 8001ef4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ef6:	e042      	b.n	8001f7e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0e:	d122      	bne.n	8001f56 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2200      	movs	r2, #0
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f850 	bl	8001fc0 <UART_WaitOnFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e046      	b.n	8001fb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3302      	adds	r3, #2
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	e017      	b.n	8001f7e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3301      	adds	r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	e013      	b.n	8001f7e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2180      	movs	r1, #128	; 0x80
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 f82d 	bl	8001fc0 <UART_WaitOnFlagUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e023      	b.n	8001fb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	60ba      	str	r2, [r7, #8]
 8001f76:	781a      	ldrb	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1b7      	bne.n	8001ef8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2140      	movs	r1, #64	; 0x40
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f814 	bl	8001fc0 <UART_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e00a      	b.n	8001fb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fd0:	e02c      	b.n	800202c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d028      	beq.n	800202c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fe0:	f7fe f914 	bl	800020c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d21d      	bcs.n	800202c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ffe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e00f      	b.n	800204c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4013      	ands	r3, r2
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	429a      	cmp	r2, r3
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	429a      	cmp	r2, r3
 8002048:	d0c3      	beq.n	8001fd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800208e:	f023 030c 	bic.w	r3, r3, #12
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	68f9      	ldr	r1, [r7, #12]
 8002098:	430b      	orrs	r3, r1
 800209a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a52      	ldr	r2, [pc, #328]	; (8002200 <UART_SetConfig+0x1ac>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d14e      	bne.n	800215a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020bc:	f7ff fdb2 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 80020c0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	009a      	lsls	r2, r3, #2
 80020cc:	441a      	add	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	4a4a      	ldr	r2, [pc, #296]	; (8002204 <UART_SetConfig+0x1b0>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	0119      	lsls	r1, r3, #4
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009a      	lsls	r2, r3, #2
 80020ec:	441a      	add	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <UART_SetConfig+0x1b0>)
 80020fa:	fba3 0302 	umull	r0, r3, r3, r2
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2064      	movs	r0, #100	; 0x64
 8002102:	fb00 f303 	mul.w	r3, r0, r3
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	3332      	adds	r3, #50	; 0x32
 800210c:	4a3d      	ldr	r2, [pc, #244]	; (8002204 <UART_SetConfig+0x1b0>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002118:	4419      	add	r1, r3
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	441a      	add	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <UART_SetConfig+0x1b0>)
 8002132:	fba3 0302 	umull	r0, r3, r3, r2
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2064      	movs	r0, #100	; 0x64
 800213a:	fb00 f303 	mul.w	r3, r0, r3
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	3332      	adds	r3, #50	; 0x32
 8002144:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <UART_SetConfig+0x1b0>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	440a      	add	r2, r1
 8002156:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002158:	e04d      	b.n	80021f6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800215a:	f7ff fd4f 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 800215e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	009a      	lsls	r2, r3, #2
 800216a:	441a      	add	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4a23      	ldr	r2, [pc, #140]	; (8002204 <UART_SetConfig+0x1b0>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	0119      	lsls	r1, r3, #4
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	009a      	lsls	r2, r3, #2
 800218a:	441a      	add	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	fbb2 f2f3 	udiv	r2, r2, r3
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <UART_SetConfig+0x1b0>)
 8002198:	fba3 0302 	umull	r0, r3, r3, r2
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	2064      	movs	r0, #100	; 0x64
 80021a0:	fb00 f303 	mul.w	r3, r0, r3
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	3332      	adds	r3, #50	; 0x32
 80021aa:	4a16      	ldr	r2, [pc, #88]	; (8002204 <UART_SetConfig+0x1b0>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b6:	4419      	add	r1, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	009a      	lsls	r2, r3, #2
 80021c2:	441a      	add	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <UART_SetConfig+0x1b0>)
 80021d0:	fba3 0302 	umull	r0, r3, r3, r2
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	2064      	movs	r0, #100	; 0x64
 80021d8:	fb00 f303 	mul.w	r3, r0, r3
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	3332      	adds	r3, #50	; 0x32
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <UART_SetConfig+0x1b0>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	f003 020f 	and.w	r2, r3, #15
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	440a      	add	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40013800 	.word	0x40013800
 8002204:	51eb851f 	.word	0x51eb851f

08002208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b094      	sub	sp, #80	; 0x50
 800220c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002212:	2228      	movs	r2, #40	; 0x28
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fffc 	bl	8003214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002238:	2301      	movs	r3, #1
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800223c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002246:	2301      	movs	r3, #1
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224a:	2302      	movs	r3, #2
 800224c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800224e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800225a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f8f6 	bl	8001450 <HAL_RCC_OscConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800226a:	f000 fdf1 	bl	8002e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800226e:	230f      	movs	r3, #15
 8002270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800227a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2102      	movs	r1, #2
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fb60 	bl	8001950 <HAL_RCC_ClockConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002296:	f000 fddb 	bl	8002e50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800229a:	2302      	movs	r3, #2
 800229c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800229e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fcee 	bl	8001c88 <HAL_RCCEx_PeriphCLKConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022b2:	f000 fdcd 	bl	8002e50 <Error_Handler>
  }
}
 80022b6:	bf00      	nop
 80022b8:	3750      	adds	r7, #80	; 0x50
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <MX_ADC1_Init+0xcc>)
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <MX_ADC1_Init+0xd0>)
 80022d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <MX_ADC1_Init+0xcc>)
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022de:	4b2b      	ldr	r3, [pc, #172]	; (800238c <MX_ADC1_Init+0xcc>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <MX_ADC1_Init+0xcc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <MX_ADC1_Init+0xcc>)
 80022ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <MX_ADC1_Init+0xcc>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <MX_ADC1_Init+0xcc>)
 80022fa:	2204      	movs	r2, #4
 80022fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022fe:	4823      	ldr	r0, [pc, #140]	; (800238c <MX_ADC1_Init+0xcc>)
 8002300:	f7fd ff8e 	bl	8000220 <HAL_ADC_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800230a:	f000 fda1 	bl	8002e50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800230e:	2304      	movs	r3, #4
 8002310:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002312:	2301      	movs	r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002316:	2307      	movs	r3, #7
 8002318:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4619      	mov	r1, r3
 800231e:	481b      	ldr	r0, [pc, #108]	; (800238c <MX_ADC1_Init+0xcc>)
 8002320:	f7fe fa1c 	bl	800075c <HAL_ADC_ConfigChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800232a:	f000 fd91 	bl	8002e50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800232e:	2305      	movs	r3, #5
 8002330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002332:	2302      	movs	r3, #2
 8002334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4814      	ldr	r0, [pc, #80]	; (800238c <MX_ADC1_Init+0xcc>)
 800233c:	f7fe fa0e 	bl	800075c <HAL_ADC_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002346:	f000 fd83 	bl	8002e50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800234a:	2306      	movs	r3, #6
 800234c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800234e:	2303      	movs	r3, #3
 8002350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	4619      	mov	r1, r3
 8002356:	480d      	ldr	r0, [pc, #52]	; (800238c <MX_ADC1_Init+0xcc>)
 8002358:	f7fe fa00 	bl	800075c <HAL_ADC_ConfigChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002362:	f000 fd75 	bl	8002e50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002366:	2304      	movs	r3, #4
 8002368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800236a:	2304      	movs	r3, #4
 800236c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <MX_ADC1_Init+0xcc>)
 8002374:	f7fe f9f2 	bl	800075c <HAL_ADC_ConfigChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800237e:	f000 fd67 	bl	8002e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200000d4 	.word	0x200000d4
 8002390:	40012400 	.word	0x40012400

08002394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <MX_USART2_UART_Init+0x4c>)
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <MX_USART2_UART_Init+0x50>)
 800239c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <MX_USART2_UART_Init+0x4c>)
 80023a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <MX_USART2_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <MX_USART2_UART_Init+0x4c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <MX_USART2_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <MX_USART2_UART_Init+0x4c>)
 80023ba:	220c      	movs	r2, #12
 80023bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <MX_USART2_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <MX_USART2_UART_Init+0x4c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_USART2_UART_Init+0x4c>)
 80023cc:	f7ff fd12 	bl	8001df4 <HAL_UART_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023d6:	f000 fd3b 	bl	8002e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000164 	.word	0x20000164
 80023e4:	40004400 	.word	0x40004400

080023e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_DMA_Init+0x38>)
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <MX_DMA_Init+0x38>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6153      	str	r3, [r2, #20]
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_DMA_Init+0x38>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	200b      	movs	r0, #11
 800240c:	f7fe fc71 	bl	8000cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002410:	200b      	movs	r0, #11
 8002412:	f7fe fc8a 	bl	8000d2a <HAL_NVIC_EnableIRQ>

}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000

08002424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002438:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <MX_GPIO_Init+0xd0>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a2d      	ldr	r2, [pc, #180]	; (80024f4 <MX_GPIO_Init+0xd0>)
 800243e:	f043 0320 	orr.w	r3, r3, #32
 8002442:	6193      	str	r3, [r2, #24]
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <MX_GPIO_Init+0xd0>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <MX_GPIO_Init+0xd0>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <MX_GPIO_Init+0xd0>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <MX_GPIO_Init+0xd0>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <MX_GPIO_Init+0xd0>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <MX_GPIO_Init+0xd0>)
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <MX_GPIO_Init+0xd0>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|LedOut_Pin|LCD_D7_Pin|LCD_D6_Pin
 8002480:	2200      	movs	r2, #0
 8002482:	f640 71f8 	movw	r1, #4088	; 0xff8
 8002486:	481c      	ldr	r0, [pc, #112]	; (80024f8 <MX_GPIO_Init+0xd4>)
 8002488:	f7fe ffc9 	bl	800141e <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D4_Pin|LCD_Enable_Pin|LCD_RW_Pin
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Katoda_GPIO_Port, LCD_Katoda_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002492:	481a      	ldr	r0, [pc, #104]	; (80024fc <MX_GPIO_Init+0xd8>)
 8002494:	f7fe ffc3 	bl	800141e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Pb_SS_Pin Pb_Reset_Pin */
  GPIO_InitStruct.Pin = Pb_SS_Pin|Pb_Reset_Pin;
 8002498:	2303      	movs	r3, #3
 800249a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4619      	mov	r1, r3
 80024aa:	4813      	ldr	r0, [pc, #76]	; (80024f8 <MX_GPIO_Init+0xd4>)
 80024ac:	f7fe fe46 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LedOut_Pin LCD_D7_Pin LCD_D6_Pin
                           LCD_D5_Pin LCD_D4_Pin LCD_Enable_Pin LCD_RW_Pin
                           LCD_RS_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LedOut_Pin|LCD_D7_Pin|LCD_D6_Pin
 80024b0:	f640 73f8 	movw	r3, #4088	; 0xff8
 80024b4:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin|LCD_D4_Pin|LCD_Enable_Pin|LCD_RW_Pin
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b6:	2301      	movs	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2302      	movs	r3, #2
 80024c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	4619      	mov	r1, r3
 80024c8:	480b      	ldr	r0, [pc, #44]	; (80024f8 <MX_GPIO_Init+0xd4>)
 80024ca:	f7fe fe37 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Katoda_Pin */
  GPIO_InitStruct.Pin = LCD_Katoda_Pin;
 80024ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2302      	movs	r3, #2
 80024de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_Katoda_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4619      	mov	r1, r3
 80024e6:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_GPIO_Init+0xd8>)
 80024e8:	f7fe fe28 	bl	800113c <HAL_GPIO_Init>

}
 80024ec:	bf00      	nop
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010c00 	.word	0x40010c00
 80024fc:	40010800 	.word	0x40010800

08002500 <LCD_Write4Bit>:
#include "LCDku.h"
#include <stdio.h>
#include "HardwareInitku.h"

void LCD_Write4Bit(uint8_t data)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((data>>0)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	4814      	ldr	r0, [pc, #80]	; (8002568 <LCD_Write4Bit+0x68>)
 8002518:	f7fe ff81 	bl	800141e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((data>>1)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	085b      	lsrs	r3, r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	2120      	movs	r1, #32
 800252c:	480e      	ldr	r0, [pc, #56]	; (8002568 <LCD_Write4Bit+0x68>)
 800252e:	f7fe ff76 	bl	800141e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((data>>2)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	2110      	movs	r1, #16
 8002542:	4809      	ldr	r0, [pc, #36]	; (8002568 <LCD_Write4Bit+0x68>)
 8002544:	f7fe ff6b 	bl	800141e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((data>>3)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	2108      	movs	r1, #8
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <LCD_Write4Bit+0x68>)
 800255a:	f7fe ff60 	bl	800141e <HAL_GPIO_WritePin>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40010c00 	.word	0x40010c00

0800256c <LCD_Send>:
void LCD_Send(_Bool mode, uint8_t data)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	460a      	mov	r2, r1
 8002576:	71fb      	strb	r3, [r7, #7]
 8002578:	4613      	mov	r3, r2
 800257a:	71bb      	strb	r3, [r7, #6]
	LCD_RW(0);
 800257c:	2200      	movs	r2, #0
 800257e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002582:	482e      	ldr	r0, [pc, #184]	; (800263c <LCD_Send+0xd0>)
 8002584:	f7fe ff4b 	bl	800141e <HAL_GPIO_WritePin>
	if(mode){
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <LCD_Send+0x30>
		LCD_RS(1);
 800258e:	2201      	movs	r2, #1
 8002590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002594:	4829      	ldr	r0, [pc, #164]	; (800263c <LCD_Send+0xd0>)
 8002596:	f7fe ff42 	bl	800141e <HAL_GPIO_WritePin>
 800259a:	e005      	b.n	80025a8 <LCD_Send+0x3c>
	}else{
		LCD_RS(0);
 800259c:	2200      	movs	r2, #0
 800259e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a2:	4826      	ldr	r0, [pc, #152]	; (800263c <LCD_Send+0xd0>)
 80025a4:	f7fe ff3b 	bl	800141e <HAL_GPIO_WritePin>
	}

	LCD_Write4Bit(data>>4);
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ffa6 	bl	8002500 <LCD_Write4Bit>
	LCD_EN();
 80025b4:	2201      	movs	r2, #1
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	4820      	ldr	r0, [pc, #128]	; (800263c <LCD_Send+0xd0>)
 80025ba:	f7fe ff30 	bl	800141e <HAL_GPIO_WritePin>
 80025be:	2300      	movs	r3, #0
 80025c0:	81fb      	strh	r3, [r7, #14]
 80025c2:	e002      	b.n	80025ca <LCD_Send+0x5e>
 80025c4:	89fb      	ldrh	r3, [r7, #14]
 80025c6:	3301      	adds	r3, #1
 80025c8:	81fb      	strh	r3, [r7, #14]
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025d0:	d3f8      	bcc.n	80025c4 <LCD_Send+0x58>
 80025d2:	2200      	movs	r2, #0
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	4819      	ldr	r0, [pc, #100]	; (800263c <LCD_Send+0xd0>)
 80025d8:	f7fe ff21 	bl	800141e <HAL_GPIO_WritePin>
 80025dc:	2300      	movs	r3, #0
 80025de:	81bb      	strh	r3, [r7, #12]
 80025e0:	e002      	b.n	80025e8 <LCD_Send+0x7c>
 80025e2:	89bb      	ldrh	r3, [r7, #12]
 80025e4:	3301      	adds	r3, #1
 80025e6:	81bb      	strh	r3, [r7, #12]
 80025e8:	89bb      	ldrh	r3, [r7, #12]
 80025ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025ee:	d3f8      	bcc.n	80025e2 <LCD_Send+0x76>
	LCD_Write4Bit(data);
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff84 	bl	8002500 <LCD_Write4Bit>
	LCD_EN();
 80025f8:	2201      	movs	r2, #1
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	480f      	ldr	r0, [pc, #60]	; (800263c <LCD_Send+0xd0>)
 80025fe:	f7fe ff0e 	bl	800141e <HAL_GPIO_WritePin>
 8002602:	2300      	movs	r3, #0
 8002604:	817b      	strh	r3, [r7, #10]
 8002606:	e002      	b.n	800260e <LCD_Send+0xa2>
 8002608:	897b      	ldrh	r3, [r7, #10]
 800260a:	3301      	adds	r3, #1
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002614:	d3f8      	bcc.n	8002608 <LCD_Send+0x9c>
 8002616:	2200      	movs	r2, #0
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	4808      	ldr	r0, [pc, #32]	; (800263c <LCD_Send+0xd0>)
 800261c:	f7fe feff 	bl	800141e <HAL_GPIO_WritePin>
 8002620:	2300      	movs	r3, #0
 8002622:	813b      	strh	r3, [r7, #8]
 8002624:	e002      	b.n	800262c <LCD_Send+0xc0>
 8002626:	893b      	ldrh	r3, [r7, #8]
 8002628:	3301      	adds	r3, #1
 800262a:	813b      	strh	r3, [r7, #8]
 800262c:	893b      	ldrh	r3, [r7, #8]
 800262e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002632:	d3f8      	bcc.n	8002626 <LCD_Send+0xba>
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40010c00 	.word	0x40010c00

08002640 <LCD_Init>:
void LCD_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	LCD_RW(0);
 8002644:	2200      	movs	r2, #0
 8002646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264a:	480c      	ldr	r0, [pc, #48]	; (800267c <LCD_Init+0x3c>)
 800264c:	f7fe fee7 	bl	800141e <HAL_GPIO_WritePin>

	LCD_Command(0x33);
 8002650:	2133      	movs	r1, #51	; 0x33
 8002652:	2000      	movs	r0, #0
 8002654:	f7ff ff8a 	bl	800256c <LCD_Send>
	LCD_Command(0x32);
 8002658:	2132      	movs	r1, #50	; 0x32
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff ff86 	bl	800256c <LCD_Send>
	LCD_Command(0x28);
 8002660:	2128      	movs	r1, #40	; 0x28
 8002662:	2000      	movs	r0, #0
 8002664:	f7ff ff82 	bl	800256c <LCD_Send>
	LCD_Command(0x0C);
 8002668:	210c      	movs	r1, #12
 800266a:	2000      	movs	r0, #0
 800266c:	f7ff ff7e 	bl	800256c <LCD_Send>
	LCD_Command(0x06);
 8002670:	2106      	movs	r1, #6
 8002672:	2000      	movs	r0, #0
 8002674:	f7ff ff7a 	bl	800256c <LCD_Send>
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40010c00 	.word	0x40010c00

08002680 <LCD_Print>:
void LCD_Print(char *pData)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	while(*pData){
 8002688:	e007      	b.n	800269a <LCD_Print+0x1a>
		LCD_Data(*pData++);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	2001      	movs	r0, #1
 8002696:	f7ff ff69 	bl	800256c <LCD_Send>
	while(*pData){
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f3      	bne.n	800268a <LCD_Print+0xa>
	}
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <LCD_PrintNum>:
void LCD_PrintNum(uint16_t numVal)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	80fb      	strh	r3, [r7, #6]
	char bufprint[20];
	sprintf(bufprint, "%d", numVal);
 80026b6:	88fa      	ldrh	r2, [r7, #6]
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	4906      	ldr	r1, [pc, #24]	; (80026d8 <LCD_PrintNum+0x2c>)
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fdb0 	bl	8003224 <siprintf>
	LCD_Print(bufprint);
 80026c4:	f107 030c 	add.w	r3, r7, #12
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ffd9 	bl	8002680 <LCD_Print>
}
 80026ce:	bf00      	nop
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	08003a74 	.word	0x08003a74

080026dc <LCD_SetCursor>:
void LCD_SetCursor(uint8_t x, uint8_t y)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	460a      	mov	r2, r1
 80026e6:	71fb      	strb	r3, [r7, #7]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71bb      	strb	r3, [r7, #6]
	if(y==0){
 80026ec:	79bb      	ldrb	r3, [r7, #6]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <LCD_SetCursor+0x24>
		LCD_Command(0x80+x);
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	3b80      	subs	r3, #128	; 0x80
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7ff ff36 	bl	800256c <LCD_Send>
	}
	if(y==1){
 8002700:	79bb      	ldrb	r3, [r7, #6]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d106      	bne.n	8002714 <LCD_SetCursor+0x38>
		LCD_Command(0xC0+x);
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	3b40      	subs	r3, #64	; 0x40
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff ff2c 	bl	800256c <LCD_Send>
	}
	if(y==2){
 8002714:	79bb      	ldrb	r3, [r7, #6]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d106      	bne.n	8002728 <LCD_SetCursor+0x4c>
		LCD_Command(0x94+x);
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	3b6c      	subs	r3, #108	; 0x6c
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4619      	mov	r1, r3
 8002722:	2000      	movs	r0, #0
 8002724:	f7ff ff22 	bl	800256c <LCD_Send>
	}
	if(y==3){
 8002728:	79bb      	ldrb	r3, [r7, #6]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d106      	bne.n	800273c <LCD_SetCursor+0x60>
		LCD_Command(0xD4+x);
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	3b2c      	subs	r3, #44	; 0x2c
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4619      	mov	r1, r3
 8002736:	2000      	movs	r0, #0
 8002738:	f7ff ff18 	bl	800256c <LCD_Send>
	}
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <LCD_Clear>:
void LCD_Clear(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	LCD_Command(0x01);
 8002748:	2101      	movs	r1, #1
 800274a:	2000      	movs	r0, #0
 800274c:	f7ff ff0e 	bl	800256c <LCD_Send>
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <__NVIC_EnableIRQ>:
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4906      	ldr	r1, [pc, #24]	; (8002788 <__NVIC_EnableIRQ+0x34>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <SysTick_Config>:
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f0:	d301      	bcc.n	80027f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00f      	b.n	8002816 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <SysTick_Config+0x40>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fe:	210f      	movs	r1, #15
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f7ff ffc2 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <SysTick_Config+0x40>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <SysTick_Config+0x40>)
 8002810:	2207      	movs	r2, #7
 8002812:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010

08002824 <SCH_Init>:
#include "HardwareInitku.h"
#include "LCDku.h"
#include "Taskku.h"


void SCH_Init(void){
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002828:	4b15      	ldr	r3, [pc, #84]	; (8002880 <SCH_Init+0x5c>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <SCH_Init+0x5c>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	61d3      	str	r3, [r2, #28]

	TIM4->PSC = 0;
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <SCH_Init+0x60>)
 8002836:	2200      	movs	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 144;
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <SCH_Init+0x60>)
 800283c:	2290      	movs	r2, #144	; 0x90
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CR1 |= TIM_CR1_URS;
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <SCH_Init+0x60>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <SCH_Init+0x60>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6013      	str	r3, [r2, #0]
	TIM4->DIER |= TIM_DIER_UIE;
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <SCH_Init+0x60>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <SCH_Init+0x60>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= TIM_EGR_UG;
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <SCH_Init+0x60>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	4a09      	ldr	r2, [pc, #36]	; (8002884 <SCH_Init+0x60>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6153      	str	r3, [r2, #20]

	NVIC_EnableIRQ(TIM4_IRQn);
 8002864:	201e      	movs	r0, #30
 8002866:	f7ff ff75 	bl	8002754 <__NVIC_EnableIRQ>

	SysTick_Config(SystemCoreClock/1000);
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <SCH_Init+0x64>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <SCH_Init+0x68>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ffb2 	bl	80027e0 <SysTick_Config>

}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	40000800 	.word	0x40000800
 8002888:	2000001c 	.word	0x2000001c
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <task_run>:
	time_minute=0;

	counter_stop=0;
}
void task_run(void)
{
 8002890:	b490      	push	{r4, r7}
 8002892:	af00      	add	r7, sp, #0
	counter_stop++;
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <task_run+0x60>)
 8002896:	e9d3 1200 	ldrd	r1, r2, [r3]
 800289a:	1c4b      	adds	r3, r1, #1
 800289c:	f142 0400 	adc.w	r4, r2, #0
 80028a0:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <task_run+0x60>)
 80028a2:	e9c2 3400 	strd	r3, r4, [r2]
	milisec++;
 80028a6:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <task_run+0x64>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <task_run+0x64>)
 80028b0:	801a      	strh	r2, [r3, #0]

	if(milisec>999){
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <task_run+0x64>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ba:	d308      	bcc.n	80028ce <task_run+0x3e>
		sec++;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <task_run+0x68>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <task_run+0x68>)
 80028c6:	701a      	strb	r2, [r3, #0]
		milisec=0;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <task_run+0x64>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]
	}
	if(sec>59){
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <task_run+0x68>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b3b      	cmp	r3, #59	; 0x3b
 80028d4:	d908      	bls.n	80028e8 <task_run+0x58>
		min++;
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <task_run+0x6c>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <task_run+0x6c>)
 80028e0:	701a      	strb	r2, [r3, #0]
		sec=0;
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <task_run+0x68>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
	}
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc90      	pop	{r4, r7}
 80028ee:	4770      	bx	lr
 80028f0:	20000158 	.word	0x20000158
 80028f4:	200000d2 	.word	0x200000d2
 80028f8:	20000153 	.word	0x20000153
 80028fc:	20000152 	.word	0x20000152

08002900 <show_timer>:
void show_timer(void){
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
	time_milisec=milisec;
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <show_timer+0x60>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <show_timer+0x64>)
 800290c:	601a      	str	r2, [r3, #0]
	time_sec=sec;
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <show_timer+0x68>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <show_timer+0x6c>)
 8002916:	601a      	str	r2, [r3, #0]
	time_minute=min;
 8002918:	4b15      	ldr	r3, [pc, #84]	; (8002970 <show_timer+0x70>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <show_timer+0x74>)
 8002920:	601a      	str	r2, [r3, #0]
	LCD_SetCursor(8,3);
 8002922:	2103      	movs	r1, #3
 8002924:	2008      	movs	r0, #8
 8002926:	f7ff fed9 	bl	80026dc <LCD_SetCursor>
	LCD_PrintNum(time_minute);LCD_Print(":");LCD_PrintNum(time_sec);LCD_Print(":");
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <show_timer+0x74>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff febb 	bl	80026ac <LCD_PrintNum>
 8002936:	4810      	ldr	r0, [pc, #64]	; (8002978 <show_timer+0x78>)
 8002938:	f7ff fea2 	bl	8002680 <LCD_Print>
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <show_timer+0x6c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff feb2 	bl	80026ac <LCD_PrintNum>
 8002948:	480b      	ldr	r0, [pc, #44]	; (8002978 <show_timer+0x78>)
 800294a:	f7ff fe99 	bl	8002680 <LCD_Print>
	LCD_PrintNum(time_milisec);
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <show_timer+0x64>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fea9 	bl	80026ac <LCD_PrintNum>
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200000d2 	.word	0x200000d2
 8002964:	200000b8 	.word	0x200000b8
 8002968:	20000153 	.word	0x20000153
 800296c:	200001a8 	.word	0x200001a8
 8002970:	20000152 	.word	0x20000152
 8002974:	200001b0 	.word	0x200001b0
 8002978:	08003a78 	.word	0x08003a78

0800297c <__NVIC_EnableIRQ>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4906      	ldr	r1, [pc, #24]	; (80029b0 <__NVIC_EnableIRQ+0x34>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <TIM3_IRQHandler>:
 */
#include "SCHtimeku2.h"
#include "Taskku.h"

void TIM3_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	Task_Run_Main();
 80029b8:	f000 f898 	bl	8002aec <Task_Run_Main>
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}

080029c0 <SCH_Init2>:
void SCH_Init2(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <SCH_Init2+0x58>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <SCH_Init2+0x58>)
 80029ca:	f043 0302 	orr.w	r3, r3, #2
 80029ce:	61d3      	str	r3, [r2, #28]

	TIM3->PSC = 0;
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <SCH_Init2+0x5c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 72;
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <SCH_Init2+0x5c>)
 80029d8:	2248      	movs	r2, #72	; 0x48
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CR1 |= TIM_CR1_URS;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <SCH_Init2+0x5c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <SCH_Init2+0x5c>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= TIM_DIER_UIE;
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <SCH_Init2+0x5c>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <SCH_Init2+0x5c>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= TIM_EGR_UG;
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <SCH_Init2+0x5c>)
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <SCH_Init2+0x5c>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <SCH_Init2+0x5c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <SCH_Init2+0x5c>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM3_IRQn);
 8002a0c:	201d      	movs	r0, #29
 8002a0e:	f7ff ffb5 	bl	800297c <__NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40000400 	.word	0x40000400

08002a20 <Open_ADC_Init>:

uint64_t timeout_Value = 3000000;
uint64_t timeout_Loop = 0;

void Open_ADC_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)value, 4);
 8002a24:	2204      	movs	r2, #4
 8002a26:	4903      	ldr	r1, [pc, #12]	; (8002a34 <Open_ADC_Init+0x14>)
 8002a28:	4803      	ldr	r0, [pc, #12]	; (8002a38 <Open_ADC_Init+0x18>)
 8002a2a:	f7fd fcd1 	bl	80003d0 <HAL_ADC_Start_DMA>
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200001b4 	.word	0x200001b4
 8002a38:	200000d4 	.word	0x200000d4

08002a3c <Task_Calibrate>:
void Task_Init(void)
{
	LCD_Init();
}
void Task_Calibrate(_Bool state)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
	if(state)
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d042      	beq.n	8002ad2 <Task_Calibrate+0x96>
	{
		for(uint8_t i=0; i<3; i++){
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e03c      	b.n	8002acc <Task_Calibrate+0x90>
			if(value[i] < Light[i])
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	4a21      	ldr	r2, [pc, #132]	; (8002adc <Task_Calibrate+0xa0>)
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	4920      	ldr	r1, [pc, #128]	; (8002ae0 <Task_Calibrate+0xa4>)
 8002a5e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d208      	bcs.n	8002a78 <Task_Calibrate+0x3c>
			{
				Light[i] = value[i];
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <Task_Calibrate+0xa0>)
 8002a6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	b291      	uxth	r1, r2
 8002a72:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <Task_Calibrate+0xa4>)
 8002a74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(value[i] > Dark[i])
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	4a18      	ldr	r2, [pc, #96]	; (8002adc <Task_Calibrate+0xa0>)
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	4918      	ldr	r1, [pc, #96]	; (8002ae4 <Task_Calibrate+0xa8>)
 8002a84:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d908      	bls.n	8002a9e <Task_Calibrate+0x62>
			{
				Dark[i] = value[i];
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <Task_Calibrate+0xa0>)
 8002a90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	b291      	uxth	r1, r2
 8002a98:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <Task_Calibrate+0xa8>)
 8002a9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			Thrs[i] = ((Light[i]+Dark[i])/2)-200;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <Task_Calibrate+0xa4>)
 8002aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <Task_Calibrate+0xa8>)
 8002aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0fda      	lsrs	r2, r3, #31
 8002ab4:	4413      	add	r3, r2
 8002ab6:	105b      	asrs	r3, r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	3ac8      	subs	r2, #200	; 0xc8
 8002abe:	b291      	uxth	r1, r2
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <Task_Calibrate+0xac>)
 8002ac2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i=0; i<3; i++){
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d9bf      	bls.n	8002a52 <Task_Calibrate+0x16>
		}
	}
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	200001b4 	.word	0x200001b4
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	200001f8 	.word	0x200001f8
 8002ae8:	200001e0 	.word	0x200001e0

08002aec <Task_Run_Main>:

void Task_Run_Main(void)
{
 8002aec:	b598      	push	{r3, r4, r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	/* Start Button */
	if(Start_On){
 8002af0:	2101      	movs	r1, #1
 8002af2:	4881      	ldr	r0, [pc, #516]	; (8002cf8 <Task_Run_Main+0x20c>)
 8002af4:	f7fe fc7c 	bl	80013f0 <HAL_GPIO_ReadPin>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d126      	bne.n	8002b4c <Task_Run_Main+0x60>
		if(timeOut1++ > timeOutVal){
 8002afe:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <Task_Run_Main+0x210>)
 8002b00:	cb18      	ldmia	r3, {r3, r4}
 8002b02:	1c59      	adds	r1, r3, #1
 8002b04:	f144 0200 	adc.w	r2, r4, #0
 8002b08:	487c      	ldr	r0, [pc, #496]	; (8002cfc <Task_Run_Main+0x210>)
 8002b0a:	e9c0 1200 	strd	r1, r2, [r0]
 8002b0e:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <Task_Run_Main+0x214>)
 8002b10:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002b14:	42a2      	cmp	r2, r4
 8002b16:	bf08      	it	eq
 8002b18:	4299      	cmpeq	r1, r3
 8002b1a:	d20c      	bcs.n	8002b36 <Task_Run_Main+0x4a>
			stopwatchEnable=0;
 8002b1c:	4b79      	ldr	r3, [pc, #484]	; (8002d04 <Task_Run_Main+0x218>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
			UART_Println("PUSH BUTTON RESET ERROR!");
 8002b22:	4879      	ldr	r0, [pc, #484]	; (8002d08 <Task_Run_Main+0x21c>)
 8002b24:	f000 f94c 	bl	8002dc0 <UART_Println>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b2e:	4872      	ldr	r0, [pc, #456]	; (8002cf8 <Task_Run_Main+0x20c>)
 8002b30:	f7fe fc75 	bl	800141e <HAL_GPIO_WritePin>
 8002b34:	e017      	b.n	8002b66 <Task_Run_Main+0x7a>
		}else{
			bouncing1 = (bouncing1<<1)|1;
 8002b36:	4b75      	ldr	r3, [pc, #468]	; (8002d0c <Task_Run_Main+0x220>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	b25b      	sxtb	r3, r3
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	b25b      	sxtb	r3, r3
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b71      	ldr	r3, [pc, #452]	; (8002d0c <Task_Run_Main+0x220>)
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e00c      	b.n	8002b66 <Task_Run_Main+0x7a>
		}
	}else{
		timeOut1=0;
 8002b4c:	4a6b      	ldr	r2, [pc, #428]	; (8002cfc <Task_Run_Main+0x210>)
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	f04f 0400 	mov.w	r4, #0
 8002b56:	e9c2 3400 	strd	r3, r4, [r2]
		bouncing1=bouncing1<<1;
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <Task_Run_Main+0x220>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <Task_Run_Main+0x220>)
 8002b64:	701a      	strb	r2, [r3, #0]
	}
	if(bouncing1==3){
 8002b66:	4b69      	ldr	r3, [pc, #420]	; (8002d0c <Task_Run_Main+0x220>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d10e      	bne.n	8002b8c <Task_Run_Main+0xa0>
		stopwatchEnable = !stopwatchEnable;
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <Task_Run_Main+0x218>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f083 0301 	eor.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <Task_Run_Main+0x218>)
 8002b8a:	701a      	strb	r2, [r3, #0]
	}

	/*	Reset Button */
	if(Reset_On){
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	485a      	ldr	r0, [pc, #360]	; (8002cf8 <Task_Run_Main+0x20c>)
 8002b90:	f7fe fc2e 	bl	80013f0 <HAL_GPIO_ReadPin>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d123      	bne.n	8002be2 <Task_Run_Main+0xf6>
		if(timeOut2++ > timeOutVal)
 8002b9a:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <Task_Run_Main+0x224>)
 8002b9c:	cb18      	ldmia	r3, {r3, r4}
 8002b9e:	1c59      	adds	r1, r3, #1
 8002ba0:	f144 0200 	adc.w	r2, r4, #0
 8002ba4:	485a      	ldr	r0, [pc, #360]	; (8002d10 <Task_Run_Main+0x224>)
 8002ba6:	e9c0 1200 	strd	r1, r2, [r0]
 8002baa:	4a55      	ldr	r2, [pc, #340]	; (8002d00 <Task_Run_Main+0x214>)
 8002bac:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002bb0:	42a2      	cmp	r2, r4
 8002bb2:	bf08      	it	eq
 8002bb4:	4299      	cmpeq	r1, r3
 8002bb6:	d209      	bcs.n	8002bcc <Task_Run_Main+0xe0>
		{
			UART_Println("PUSH BUTTON RESET ERROR!");
 8002bb8:	4853      	ldr	r0, [pc, #332]	; (8002d08 <Task_Run_Main+0x21c>)
 8002bba:	f000 f901 	bl	8002dc0 <UART_Println>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bc4:	484c      	ldr	r0, [pc, #304]	; (8002cf8 <Task_Run_Main+0x20c>)
 8002bc6:	f7fe fc2a 	bl	800141e <HAL_GPIO_WritePin>
 8002bca:	e017      	b.n	8002bfc <Task_Run_Main+0x110>
		}else{
			bouncing2 = (bouncing2<<1)|1;
 8002bcc:	4b51      	ldr	r3, [pc, #324]	; (8002d14 <Task_Run_Main+0x228>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <Task_Run_Main+0x228>)
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e00c      	b.n	8002bfc <Task_Run_Main+0x110>
		}
	}else{
		timeOut2=0;
 8002be2:	4a4b      	ldr	r2, [pc, #300]	; (8002d10 <Task_Run_Main+0x224>)
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	f04f 0400 	mov.w	r4, #0
 8002bec:	e9c2 3400 	strd	r3, r4, [r2]
		bouncing2=bouncing2<<1;
 8002bf0:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <Task_Run_Main+0x228>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <Task_Run_Main+0x228>)
 8002bfa:	701a      	strb	r2, [r3, #0]
	}
	if(bouncing2==3){
 8002bfc:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <Task_Run_Main+0x228>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d107      	bne.n	8002c14 <Task_Run_Main+0x128>
		LCD_Clear();
 8002c04:	f7ff fd9e 	bl	8002744 <LCD_Clear>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c0e:	483a      	ldr	r0, [pc, #232]	; (8002cf8 <Task_Run_Main+0x20c>)
 8002c10:	f7fe fc05 	bl	800141e <HAL_GPIO_WritePin>
	}

	/*	Calibrate Sensor	*/
	Task_Calibrate(!stopwatchEnable);
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <Task_Run_Main+0x218>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f083 0301 	eor.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff04 	bl	8002a3c <Task_Calibrate>

	if(stopwatchEnable){
 8002c34:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <Task_Run_Main+0x218>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d05a      	beq.n	8002cf2 <Task_Run_Main+0x206>
		if(value[0] < Thrs[0]){
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <Task_Run_Main+0x22c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a36      	ldr	r2, [pc, #216]	; (8002d1c <Task_Run_Main+0x230>)
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d222      	bcs.n	8002c8e <Task_Run_Main+0x1a2>
			if(timeOut3++ > timeOutVal){
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <Task_Run_Main+0x234>)
 8002c4a:	cb18      	ldmia	r3, {r3, r4}
 8002c4c:	1c59      	adds	r1, r3, #1
 8002c4e:	f144 0200 	adc.w	r2, r4, #0
 8002c52:	4833      	ldr	r0, [pc, #204]	; (8002d20 <Task_Run_Main+0x234>)
 8002c54:	e9c0 1200 	strd	r1, r2, [r0]
 8002c58:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <Task_Run_Main+0x214>)
 8002c5a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002c5e:	42a2      	cmp	r2, r4
 8002c60:	bf08      	it	eq
 8002c62:	4299      	cmpeq	r1, r3
 8002c64:	d208      	bcs.n	8002c78 <Task_Run_Main+0x18c>
				stopwatchEnable=0;
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <Task_Run_Main+0x218>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
				LCD_Clear();
 8002c6c:	f7ff fd6a 	bl	8002744 <LCD_Clear>
				UART_Println("SENS1 ERROR!");
 8002c70:	482c      	ldr	r0, [pc, #176]	; (8002d24 <Task_Run_Main+0x238>)
 8002c72:	f000 f8a5 	bl	8002dc0 <UART_Println>
 8002c76:	e017      	b.n	8002ca8 <Task_Run_Main+0x1bc>
			}else{
				bouncing3=(bouncing3<<1)|1;
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <Task_Run_Main+0x23c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <Task_Run_Main+0x23c>)
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e00c      	b.n	8002ca8 <Task_Run_Main+0x1bc>
			}
		}else{
			timeOut3=0;
 8002c8e:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <Task_Run_Main+0x234>)
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	f04f 0400 	mov.w	r4, #0
 8002c98:	e9c2 3400 	strd	r3, r4, [r2]
			bouncing3=bouncing3<<1;
 8002c9c:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <Task_Run_Main+0x23c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <Task_Run_Main+0x23c>)
 8002ca6:	701a      	strb	r2, [r3, #0]
		}
		if(bouncing3==3){
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <Task_Run_Main+0x23c>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d120      	bne.n	8002cf2 <Task_Run_Main+0x206>
			LAP_A++;
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <Task_Run_Main+0x240>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <Task_Run_Main+0x240>)
 8002cba:	701a      	strb	r2, [r3, #0]
			if(LAP_A > 5) LAP_A = 4;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <Task_Run_Main+0x240>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d902      	bls.n	8002cca <Task_Run_Main+0x1de>
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <Task_Run_Main+0x240>)
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	701a      	strb	r2, [r3, #0]
			lapA_milis=milisec;
 8002cca:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <Task_Run_Main+0x244>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <Task_Run_Main+0x248>)
 8002cd2:	601a      	str	r2, [r3, #0]
			lapA_Sec=sec;
 8002cd4:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <Task_Run_Main+0x24c>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <Task_Run_Main+0x250>)
 8002cdc:	601a      	str	r2, [r3, #0]
			lapA_minute=min;
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <Task_Run_Main+0x254>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <Task_Run_Main+0x258>)
 8002ce6:	601a      	str	r2, [r3, #0]
			Task_Display(stopwatchEnable);
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <Task_Run_Main+0x218>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f82b 	bl	8002d48 <Task_Display>
		}
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	bd98      	pop	{r3, r4, r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40010c00 	.word	0x40010c00
 8002cfc:	20000208 	.word	0x20000208
 8002d00:	20000010 	.word	0x20000010
 8002d04:	20000200 	.word	0x20000200
 8002d08:	08003a7c 	.word	0x08003a7c
 8002d0c:	20000018 	.word	0x20000018
 8002d10:	200001c8 	.word	0x200001c8
 8002d14:	20000019 	.word	0x20000019
 8002d18:	200001b4 	.word	0x200001b4
 8002d1c:	200001e0 	.word	0x200001e0
 8002d20:	200001e8 	.word	0x200001e8
 8002d24:	08003a98 	.word	0x08003a98
 8002d28:	2000001a 	.word	0x2000001a
 8002d2c:	200001fe 	.word	0x200001fe
 8002d30:	200000d2 	.word	0x200000d2
 8002d34:	200001dc 	.word	0x200001dc
 8002d38:	20000153 	.word	0x20000153
 8002d3c:	20000210 	.word	0x20000210
 8002d40:	20000152 	.word	0x20000152
 8002d44:	200001c0 	.word	0x200001c0

08002d48 <Task_Display>:
void Task_Refresh(void)
{

}
void Task_Display(_Bool state)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
	LCD_SetCursor(0, 1);
 8002d52:	2101      	movs	r1, #1
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7ff fcc1 	bl	80026dc <LCD_SetCursor>
	LCD_PrintNum(LAP_A);
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <Task_Display+0x64>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fca3 	bl	80026ac <LCD_PrintNum>
	LCD_SetCursor(0, 2);
 8002d66:	2102      	movs	r1, #2
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7ff fcb7 	bl	80026dc <LCD_SetCursor>
	LCD_PrintNum(lapA_minute);LCD_Print(":");LCD_PrintNum(lapA_Sec);LCD_Print(":");LCD_PrintNum(lapA_milis);
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <Task_Display+0x68>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fc99 	bl	80026ac <LCD_PrintNum>
 8002d7a:	480e      	ldr	r0, [pc, #56]	; (8002db4 <Task_Display+0x6c>)
 8002d7c:	f7ff fc80 	bl	8002680 <LCD_Print>
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <Task_Display+0x70>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fc90 	bl	80026ac <LCD_PrintNum>
 8002d8c:	4809      	ldr	r0, [pc, #36]	; (8002db4 <Task_Display+0x6c>)
 8002d8e:	f7ff fc77 	bl	8002680 <LCD_Print>
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <Task_Display+0x74>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fc87 	bl	80026ac <LCD_PrintNum>
	show_timer();
 8002d9e:	f7ff fdaf 	bl	8002900 <show_timer>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200001fe 	.word	0x200001fe
 8002db0:	200001c0 	.word	0x200001c0
 8002db4:	08003aa8 	.word	0x08003aa8
 8002db8:	20000210 	.word	0x20000210
 8002dbc:	200001dc 	.word	0x200001dc

08002dc0 <UART_Println>:
void UART_Print(char *pData)
{
	HAL_UART_Transmit(&huart2, (uint8_t *)pData, strlen(pData), 10);
}
void UART_Println( char *pData)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)pData, strlen(pData), 10);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fd f9bf 	bl	800014c <strlen>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4808      	ldr	r0, [pc, #32]	; (8002df8 <UART_Println+0x38>)
 8002dd8:	f7ff f859 	bl	8001e8e <HAL_UART_Transmit>
	char newLine[2] = "\n\r";
 8002ddc:	f640 530a 	movw	r3, #3338	; 0xd0a
 8002de0:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)newLine, 2, 10);
 8002de2:	f107 010c 	add.w	r1, r7, #12
 8002de6:	230a      	movs	r3, #10
 8002de8:	2202      	movs	r2, #2
 8002dea:	4803      	ldr	r0, [pc, #12]	; (8002df8 <UART_Println+0x38>)
 8002dec:	f7ff f84f 	bl	8001e8e <HAL_UART_Transmit>
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000164 	.word	0x20000164

08002dfc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
	HAL_Init();
 8002e00:	f7fd f9ac 	bl	800015c <HAL_Init>
	SystemClock_Config();
 8002e04:	f7ff fa00 	bl	8002208 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002e08:	f7ff fb0c 	bl	8002424 <MX_GPIO_Init>
	MX_DMA_Init();
 8002e0c:	f7ff faec 	bl	80023e8 <MX_DMA_Init>
	MX_ADC1_Init();
 8002e10:	f7ff fa56 	bl	80022c0 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8002e14:	f7ff fabe 	bl	8002394 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	Open_ADC_Init();
 8002e18:	f7ff fe02 	bl	8002a20 <Open_ADC_Init>
	LCD_Init();
 8002e1c:	f7ff fc10 	bl	8002640 <LCD_Init>
	LCD_Clear();
 8002e20:	f7ff fc90 	bl	8002744 <LCD_Clear>
	HAL_GPIO_WritePin(LCD_Katoda_GPIO_Port, LCD_Katoda_Pin, GPIO_PIN_SET);
 8002e24:	2201      	movs	r2, #1
 8002e26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e2a:	4807      	ldr	r0, [pc, #28]	; (8002e48 <main+0x4c>)
 8002e2c:	f7fe faf7 	bl	800141e <HAL_GPIO_WritePin>
	LCD_SetCursor(0, 0);
 8002e30:	2100      	movs	r1, #0
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7ff fc52 	bl	80026dc <LCD_SetCursor>
	LCD_Print("BISMILLAH.");
 8002e38:	4804      	ldr	r0, [pc, #16]	; (8002e4c <main+0x50>)
 8002e3a:	f7ff fc21 	bl	8002680 <LCD_Print>
	SCH_Init();
 8002e3e:	f7ff fcf1 	bl	8002824 <SCH_Init>
	SCH_Init2();
 8002e42:	f7ff fdbd 	bl	80029c0 <SCH_Init2>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002e46:	e7fe      	b.n	8002e46 <main+0x4a>
 8002e48:	40010800 	.word	0x40010800
 8002e4c:	08003aac 	.word	0x08003aac

08002e50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_MspInit+0x5c>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <HAL_MspInit+0x5c>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6193      	str	r3, [r2, #24]
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_MspInit+0x5c>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_MspInit+0x5c>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <HAL_MspInit+0x5c>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	61d3      	str	r3, [r2, #28]
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_MspInit+0x5c>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_MspInit+0x60>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <HAL_MspInit+0x60>)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40010000 	.word	0x40010000

08002ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2c      	ldr	r2, [pc, #176]	; (8002f8c <HAL_ADC_MspInit+0xcc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d151      	bne.n	8002f84 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_ADC_MspInit+0xd0>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <HAL_ADC_MspInit+0xd0>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	6193      	str	r3, [r2, #24]
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_ADC_MspInit+0xd0>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_ADC_MspInit+0xd0>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_ADC_MspInit+0xd0>)
 8002efe:	f043 0304 	orr.w	r3, r3, #4
 8002f02:	6193      	str	r3, [r2, #24]
 8002f04:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_ADC_MspInit+0xd0>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = Sensor1_Pin|Sensor2_Pin|Sensor3_Pin;
 8002f10:	2370      	movs	r3, #112	; 0x70
 8002f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f14:	2303      	movs	r3, #3
 8002f16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	481d      	ldr	r0, [pc, #116]	; (8002f94 <HAL_ADC_MspInit+0xd4>)
 8002f20:	f7fe f90c 	bl	800113c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f24:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_ADC_MspInit+0xdc>)
 8002f28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f36:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f4e:	2220      	movs	r2, #32
 8002f50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f58:	480f      	ldr	r0, [pc, #60]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f5a:	f7fd ff01 	bl	8000d60 <HAL_DMA_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002f64:	f7ff ff74 	bl	8002e50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f6c:	621a      	str	r2, [r3, #32]
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <HAL_ADC_MspInit+0xd8>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2100      	movs	r1, #0
 8002f78:	2012      	movs	r0, #18
 8002f7a:	f7fd feba 	bl	8000cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002f7e:	2012      	movs	r0, #18
 8002f80:	f7fd fed3 	bl	8000d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40012400 	.word	0x40012400
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40010800 	.word	0x40010800
 8002f98:	20000104 	.word	0x20000104
 8002f9c:	40020008 	.word	0x40020008

08002fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1b      	ldr	r2, [pc, #108]	; (8003028 <HAL_UART_MspInit+0x88>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d12f      	bne.n	8003020 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_UART_MspInit+0x8c>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <HAL_UART_MspInit+0x8c>)
 8002fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fca:	61d3      	str	r3, [r2, #28]
 8002fcc:	4b17      	ldr	r3, [pc, #92]	; (800302c <HAL_UART_MspInit+0x8c>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <HAL_UART_MspInit+0x8c>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4a13      	ldr	r2, [pc, #76]	; (800302c <HAL_UART_MspInit+0x8c>)
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	6193      	str	r3, [r2, #24]
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_UART_MspInit+0x8c>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffc:	f107 0310 	add.w	r3, r7, #16
 8003000:	4619      	mov	r1, r3
 8003002:	480b      	ldr	r0, [pc, #44]	; (8003030 <HAL_UART_MspInit+0x90>)
 8003004:	f7fe f89a 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003008:	2308      	movs	r3, #8
 800300a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	4619      	mov	r1, r3
 800301a:	4805      	ldr	r0, [pc, #20]	; (8003030 <HAL_UART_MspInit+0x90>)
 800301c:	f7fe f88e 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003020:	bf00      	nop
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40004400 	.word	0x40004400
 800302c:	40021000 	.word	0x40021000
 8003030:	40010800 	.word	0x40010800

08003034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003044:	e7fe      	b.n	8003044 <HardFault_Handler+0x4>

08003046 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800304a:	e7fe      	b.n	800304a <MemManage_Handler+0x4>

0800304c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003050:	e7fe      	b.n	8003050 <BusFault_Handler+0x4>

08003052 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003056:	e7fe      	b.n	8003056 <UsageFault_Handler+0x4>

08003058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003080:	f7fd f8b2 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  task_run();
 8003084:	f7ff fc04 	bl	8002890 <task_run>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <DMA1_Channel1_IRQHandler+0x10>)
 8003092:	f7fd ff1f 	bl	8000ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000104 	.word	0x20000104

080030a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <ADC1_2_IRQHandler+0x10>)
 80030a6:	f7fd fa71 	bl	800058c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200000d4 	.word	0x200000d4

080030b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <_sbrk+0x50>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <_sbrk+0x16>
		heap_end = &end;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <_sbrk+0x50>)
 80030c6:	4a10      	ldr	r2, [pc, #64]	; (8003108 <_sbrk+0x54>)
 80030c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <_sbrk+0x50>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <_sbrk+0x50>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	466a      	mov	r2, sp
 80030da:	4293      	cmp	r3, r2
 80030dc:	d907      	bls.n	80030ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80030de:	f000 f86f 	bl	80031c0 <__errno>
 80030e2:	4602      	mov	r2, r0
 80030e4:	230c      	movs	r3, #12
 80030e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	e006      	b.n	80030fc <_sbrk+0x48>
	}

	heap_end += incr;
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <_sbrk+0x50>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	4a03      	ldr	r2, [pc, #12]	; (8003104 <_sbrk+0x50>)
 80030f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030fa:	68fb      	ldr	r3, [r7, #12]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200000a4 	.word	0x200000a4
 8003108:	20000220 	.word	0x20000220

0800310c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <SystemInit+0x5c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <SystemInit+0x5c>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <SystemInit+0x5c>)
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4911      	ldr	r1, [pc, #68]	; (8003168 <SystemInit+0x5c>)
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <SystemInit+0x60>)
 8003124:	4013      	ands	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <SystemInit+0x5c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <SystemInit+0x5c>)
 800312e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <SystemInit+0x5c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <SystemInit+0x5c>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <SystemInit+0x5c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <SystemInit+0x5c>)
 800314a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800314e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <SystemInit+0x5c>)
 8003152:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003156:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SystemInit+0x64>)
 800315a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800315e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	40021000 	.word	0x40021000
 800316c:	f8ff0000 	.word	0xf8ff0000
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003174:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003176:	e003      	b.n	8003180 <LoopCopyDataInit>

08003178 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800317a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800317c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800317e:	3104      	adds	r1, #4

08003180 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003180:	480a      	ldr	r0, [pc, #40]	; (80031ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003184:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003186:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003188:	d3f6      	bcc.n	8003178 <CopyDataInit>
  ldr r2, =_sbss
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800318c:	e002      	b.n	8003194 <LoopFillZerobss>

0800318e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003190:	f842 3b04 	str.w	r3, [r2], #4

08003194 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003196:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003198:	d3f9      	bcc.n	800318e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800319a:	f7ff ffb7 	bl	800310c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319e:	f000 f815 	bl	80031cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031a2:	f7ff fe2b 	bl	8002dfc <main>
  bx lr
 80031a6:	4770      	bx	lr
  ldr r3, =_sidata
 80031a8:	08003b0c 	.word	0x08003b0c
  ldr r0, =_sdata
 80031ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031b0:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 80031b4:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 80031b8:	2000021c 	.word	0x2000021c

080031bc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <CAN1_RX1_IRQHandler>
	...

080031c0 <__errno>:
 80031c0:	4b01      	ldr	r3, [pc, #4]	; (80031c8 <__errno+0x8>)
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000020 	.word	0x20000020

080031cc <__libc_init_array>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	2500      	movs	r5, #0
 80031d0:	4e0c      	ldr	r6, [pc, #48]	; (8003204 <__libc_init_array+0x38>)
 80031d2:	4c0d      	ldr	r4, [pc, #52]	; (8003208 <__libc_init_array+0x3c>)
 80031d4:	1ba4      	subs	r4, r4, r6
 80031d6:	10a4      	asrs	r4, r4, #2
 80031d8:	42a5      	cmp	r5, r4
 80031da:	d109      	bne.n	80031f0 <__libc_init_array+0x24>
 80031dc:	f000 fc34 	bl	8003a48 <_init>
 80031e0:	2500      	movs	r5, #0
 80031e2:	4e0a      	ldr	r6, [pc, #40]	; (800320c <__libc_init_array+0x40>)
 80031e4:	4c0a      	ldr	r4, [pc, #40]	; (8003210 <__libc_init_array+0x44>)
 80031e6:	1ba4      	subs	r4, r4, r6
 80031e8:	10a4      	asrs	r4, r4, #2
 80031ea:	42a5      	cmp	r5, r4
 80031ec:	d105      	bne.n	80031fa <__libc_init_array+0x2e>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031f4:	4798      	blx	r3
 80031f6:	3501      	adds	r5, #1
 80031f8:	e7ee      	b.n	80031d8 <__libc_init_array+0xc>
 80031fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031fe:	4798      	blx	r3
 8003200:	3501      	adds	r5, #1
 8003202:	e7f2      	b.n	80031ea <__libc_init_array+0x1e>
 8003204:	08003b04 	.word	0x08003b04
 8003208:	08003b04 	.word	0x08003b04
 800320c:	08003b04 	.word	0x08003b04
 8003210:	08003b08 	.word	0x08003b08

08003214 <memset>:
 8003214:	4603      	mov	r3, r0
 8003216:	4402      	add	r2, r0
 8003218:	4293      	cmp	r3, r2
 800321a:	d100      	bne.n	800321e <memset+0xa>
 800321c:	4770      	bx	lr
 800321e:	f803 1b01 	strb.w	r1, [r3], #1
 8003222:	e7f9      	b.n	8003218 <memset+0x4>

08003224 <siprintf>:
 8003224:	b40e      	push	{r1, r2, r3}
 8003226:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800322a:	b500      	push	{lr}
 800322c:	b09c      	sub	sp, #112	; 0x70
 800322e:	ab1d      	add	r3, sp, #116	; 0x74
 8003230:	9002      	str	r0, [sp, #8]
 8003232:	9006      	str	r0, [sp, #24]
 8003234:	9107      	str	r1, [sp, #28]
 8003236:	9104      	str	r1, [sp, #16]
 8003238:	4808      	ldr	r0, [pc, #32]	; (800325c <siprintf+0x38>)
 800323a:	4909      	ldr	r1, [pc, #36]	; (8003260 <siprintf+0x3c>)
 800323c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003240:	9105      	str	r1, [sp, #20]
 8003242:	6800      	ldr	r0, [r0, #0]
 8003244:	a902      	add	r1, sp, #8
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	f000 f866 	bl	8003318 <_svfiprintf_r>
 800324c:	2200      	movs	r2, #0
 800324e:	9b02      	ldr	r3, [sp, #8]
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	b01c      	add	sp, #112	; 0x70
 8003254:	f85d eb04 	ldr.w	lr, [sp], #4
 8003258:	b003      	add	sp, #12
 800325a:	4770      	bx	lr
 800325c:	20000020 	.word	0x20000020
 8003260:	ffff0208 	.word	0xffff0208

08003264 <__ssputs_r>:
 8003264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003268:	688e      	ldr	r6, [r1, #8]
 800326a:	4682      	mov	sl, r0
 800326c:	429e      	cmp	r6, r3
 800326e:	460c      	mov	r4, r1
 8003270:	4690      	mov	r8, r2
 8003272:	4699      	mov	r9, r3
 8003274:	d837      	bhi.n	80032e6 <__ssputs_r+0x82>
 8003276:	898a      	ldrh	r2, [r1, #12]
 8003278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800327c:	d031      	beq.n	80032e2 <__ssputs_r+0x7e>
 800327e:	2302      	movs	r3, #2
 8003280:	6825      	ldr	r5, [r4, #0]
 8003282:	6909      	ldr	r1, [r1, #16]
 8003284:	1a6f      	subs	r7, r5, r1
 8003286:	6965      	ldr	r5, [r4, #20]
 8003288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800328c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003290:	f109 0301 	add.w	r3, r9, #1
 8003294:	443b      	add	r3, r7
 8003296:	429d      	cmp	r5, r3
 8003298:	bf38      	it	cc
 800329a:	461d      	movcc	r5, r3
 800329c:	0553      	lsls	r3, r2, #21
 800329e:	d530      	bpl.n	8003302 <__ssputs_r+0x9e>
 80032a0:	4629      	mov	r1, r5
 80032a2:	f000 fb37 	bl	8003914 <_malloc_r>
 80032a6:	4606      	mov	r6, r0
 80032a8:	b950      	cbnz	r0, 80032c0 <__ssputs_r+0x5c>
 80032aa:	230c      	movs	r3, #12
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f8ca 3000 	str.w	r3, [sl]
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ba:	81a3      	strh	r3, [r4, #12]
 80032bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c0:	463a      	mov	r2, r7
 80032c2:	6921      	ldr	r1, [r4, #16]
 80032c4:	f000 fab6 	bl	8003834 <memcpy>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	6126      	str	r6, [r4, #16]
 80032d6:	443e      	add	r6, r7
 80032d8:	6026      	str	r6, [r4, #0]
 80032da:	464e      	mov	r6, r9
 80032dc:	6165      	str	r5, [r4, #20]
 80032de:	1bed      	subs	r5, r5, r7
 80032e0:	60a5      	str	r5, [r4, #8]
 80032e2:	454e      	cmp	r6, r9
 80032e4:	d900      	bls.n	80032e8 <__ssputs_r+0x84>
 80032e6:	464e      	mov	r6, r9
 80032e8:	4632      	mov	r2, r6
 80032ea:	4641      	mov	r1, r8
 80032ec:	6820      	ldr	r0, [r4, #0]
 80032ee:	f000 faac 	bl	800384a <memmove>
 80032f2:	68a3      	ldr	r3, [r4, #8]
 80032f4:	2000      	movs	r0, #0
 80032f6:	1b9b      	subs	r3, r3, r6
 80032f8:	60a3      	str	r3, [r4, #8]
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	441e      	add	r6, r3
 80032fe:	6026      	str	r6, [r4, #0]
 8003300:	e7dc      	b.n	80032bc <__ssputs_r+0x58>
 8003302:	462a      	mov	r2, r5
 8003304:	f000 fb60 	bl	80039c8 <_realloc_r>
 8003308:	4606      	mov	r6, r0
 800330a:	2800      	cmp	r0, #0
 800330c:	d1e2      	bne.n	80032d4 <__ssputs_r+0x70>
 800330e:	6921      	ldr	r1, [r4, #16]
 8003310:	4650      	mov	r0, sl
 8003312:	f000 fab3 	bl	800387c <_free_r>
 8003316:	e7c8      	b.n	80032aa <__ssputs_r+0x46>

08003318 <_svfiprintf_r>:
 8003318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331c:	461d      	mov	r5, r3
 800331e:	898b      	ldrh	r3, [r1, #12]
 8003320:	b09d      	sub	sp, #116	; 0x74
 8003322:	061f      	lsls	r7, r3, #24
 8003324:	4680      	mov	r8, r0
 8003326:	460c      	mov	r4, r1
 8003328:	4616      	mov	r6, r2
 800332a:	d50f      	bpl.n	800334c <_svfiprintf_r+0x34>
 800332c:	690b      	ldr	r3, [r1, #16]
 800332e:	b96b      	cbnz	r3, 800334c <_svfiprintf_r+0x34>
 8003330:	2140      	movs	r1, #64	; 0x40
 8003332:	f000 faef 	bl	8003914 <_malloc_r>
 8003336:	6020      	str	r0, [r4, #0]
 8003338:	6120      	str	r0, [r4, #16]
 800333a:	b928      	cbnz	r0, 8003348 <_svfiprintf_r+0x30>
 800333c:	230c      	movs	r3, #12
 800333e:	f8c8 3000 	str.w	r3, [r8]
 8003342:	f04f 30ff 	mov.w	r0, #4294967295
 8003346:	e0c8      	b.n	80034da <_svfiprintf_r+0x1c2>
 8003348:	2340      	movs	r3, #64	; 0x40
 800334a:	6163      	str	r3, [r4, #20]
 800334c:	2300      	movs	r3, #0
 800334e:	9309      	str	r3, [sp, #36]	; 0x24
 8003350:	2320      	movs	r3, #32
 8003352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003356:	2330      	movs	r3, #48	; 0x30
 8003358:	f04f 0b01 	mov.w	fp, #1
 800335c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003360:	9503      	str	r5, [sp, #12]
 8003362:	4637      	mov	r7, r6
 8003364:	463d      	mov	r5, r7
 8003366:	f815 3b01 	ldrb.w	r3, [r5], #1
 800336a:	b10b      	cbz	r3, 8003370 <_svfiprintf_r+0x58>
 800336c:	2b25      	cmp	r3, #37	; 0x25
 800336e:	d13e      	bne.n	80033ee <_svfiprintf_r+0xd6>
 8003370:	ebb7 0a06 	subs.w	sl, r7, r6
 8003374:	d00b      	beq.n	800338e <_svfiprintf_r+0x76>
 8003376:	4653      	mov	r3, sl
 8003378:	4632      	mov	r2, r6
 800337a:	4621      	mov	r1, r4
 800337c:	4640      	mov	r0, r8
 800337e:	f7ff ff71 	bl	8003264 <__ssputs_r>
 8003382:	3001      	adds	r0, #1
 8003384:	f000 80a4 	beq.w	80034d0 <_svfiprintf_r+0x1b8>
 8003388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800338a:	4453      	add	r3, sl
 800338c:	9309      	str	r3, [sp, #36]	; 0x24
 800338e:	783b      	ldrb	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 809d 	beq.w	80034d0 <_svfiprintf_r+0x1b8>
 8003396:	2300      	movs	r3, #0
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033a0:	9304      	str	r3, [sp, #16]
 80033a2:	9307      	str	r3, [sp, #28]
 80033a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033a8:	931a      	str	r3, [sp, #104]	; 0x68
 80033aa:	462f      	mov	r7, r5
 80033ac:	2205      	movs	r2, #5
 80033ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80033b2:	4850      	ldr	r0, [pc, #320]	; (80034f4 <_svfiprintf_r+0x1dc>)
 80033b4:	f000 fa30 	bl	8003818 <memchr>
 80033b8:	9b04      	ldr	r3, [sp, #16]
 80033ba:	b9d0      	cbnz	r0, 80033f2 <_svfiprintf_r+0xda>
 80033bc:	06d9      	lsls	r1, r3, #27
 80033be:	bf44      	itt	mi
 80033c0:	2220      	movmi	r2, #32
 80033c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033c6:	071a      	lsls	r2, r3, #28
 80033c8:	bf44      	itt	mi
 80033ca:	222b      	movmi	r2, #43	; 0x2b
 80033cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033d0:	782a      	ldrb	r2, [r5, #0]
 80033d2:	2a2a      	cmp	r2, #42	; 0x2a
 80033d4:	d015      	beq.n	8003402 <_svfiprintf_r+0xea>
 80033d6:	462f      	mov	r7, r5
 80033d8:	2000      	movs	r0, #0
 80033da:	250a      	movs	r5, #10
 80033dc:	9a07      	ldr	r2, [sp, #28]
 80033de:	4639      	mov	r1, r7
 80033e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033e4:	3b30      	subs	r3, #48	; 0x30
 80033e6:	2b09      	cmp	r3, #9
 80033e8:	d94d      	bls.n	8003486 <_svfiprintf_r+0x16e>
 80033ea:	b1b8      	cbz	r0, 800341c <_svfiprintf_r+0x104>
 80033ec:	e00f      	b.n	800340e <_svfiprintf_r+0xf6>
 80033ee:	462f      	mov	r7, r5
 80033f0:	e7b8      	b.n	8003364 <_svfiprintf_r+0x4c>
 80033f2:	4a40      	ldr	r2, [pc, #256]	; (80034f4 <_svfiprintf_r+0x1dc>)
 80033f4:	463d      	mov	r5, r7
 80033f6:	1a80      	subs	r0, r0, r2
 80033f8:	fa0b f000 	lsl.w	r0, fp, r0
 80033fc:	4318      	orrs	r0, r3
 80033fe:	9004      	str	r0, [sp, #16]
 8003400:	e7d3      	b.n	80033aa <_svfiprintf_r+0x92>
 8003402:	9a03      	ldr	r2, [sp, #12]
 8003404:	1d11      	adds	r1, r2, #4
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	9103      	str	r1, [sp, #12]
 800340a:	2a00      	cmp	r2, #0
 800340c:	db01      	blt.n	8003412 <_svfiprintf_r+0xfa>
 800340e:	9207      	str	r2, [sp, #28]
 8003410:	e004      	b.n	800341c <_svfiprintf_r+0x104>
 8003412:	4252      	negs	r2, r2
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	9207      	str	r2, [sp, #28]
 800341a:	9304      	str	r3, [sp, #16]
 800341c:	783b      	ldrb	r3, [r7, #0]
 800341e:	2b2e      	cmp	r3, #46	; 0x2e
 8003420:	d10c      	bne.n	800343c <_svfiprintf_r+0x124>
 8003422:	787b      	ldrb	r3, [r7, #1]
 8003424:	2b2a      	cmp	r3, #42	; 0x2a
 8003426:	d133      	bne.n	8003490 <_svfiprintf_r+0x178>
 8003428:	9b03      	ldr	r3, [sp, #12]
 800342a:	3702      	adds	r7, #2
 800342c:	1d1a      	adds	r2, r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	9203      	str	r2, [sp, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	bfb8      	it	lt
 8003436:	f04f 33ff 	movlt.w	r3, #4294967295
 800343a:	9305      	str	r3, [sp, #20]
 800343c:	4d2e      	ldr	r5, [pc, #184]	; (80034f8 <_svfiprintf_r+0x1e0>)
 800343e:	2203      	movs	r2, #3
 8003440:	7839      	ldrb	r1, [r7, #0]
 8003442:	4628      	mov	r0, r5
 8003444:	f000 f9e8 	bl	8003818 <memchr>
 8003448:	b138      	cbz	r0, 800345a <_svfiprintf_r+0x142>
 800344a:	2340      	movs	r3, #64	; 0x40
 800344c:	1b40      	subs	r0, r0, r5
 800344e:	fa03 f000 	lsl.w	r0, r3, r0
 8003452:	9b04      	ldr	r3, [sp, #16]
 8003454:	3701      	adds	r7, #1
 8003456:	4303      	orrs	r3, r0
 8003458:	9304      	str	r3, [sp, #16]
 800345a:	7839      	ldrb	r1, [r7, #0]
 800345c:	2206      	movs	r2, #6
 800345e:	4827      	ldr	r0, [pc, #156]	; (80034fc <_svfiprintf_r+0x1e4>)
 8003460:	1c7e      	adds	r6, r7, #1
 8003462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003466:	f000 f9d7 	bl	8003818 <memchr>
 800346a:	2800      	cmp	r0, #0
 800346c:	d038      	beq.n	80034e0 <_svfiprintf_r+0x1c8>
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <_svfiprintf_r+0x1e8>)
 8003470:	bb13      	cbnz	r3, 80034b8 <_svfiprintf_r+0x1a0>
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	3307      	adds	r3, #7
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	3308      	adds	r3, #8
 800347c:	9303      	str	r3, [sp, #12]
 800347e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003480:	444b      	add	r3, r9
 8003482:	9309      	str	r3, [sp, #36]	; 0x24
 8003484:	e76d      	b.n	8003362 <_svfiprintf_r+0x4a>
 8003486:	fb05 3202 	mla	r2, r5, r2, r3
 800348a:	2001      	movs	r0, #1
 800348c:	460f      	mov	r7, r1
 800348e:	e7a6      	b.n	80033de <_svfiprintf_r+0xc6>
 8003490:	2300      	movs	r3, #0
 8003492:	250a      	movs	r5, #10
 8003494:	4619      	mov	r1, r3
 8003496:	3701      	adds	r7, #1
 8003498:	9305      	str	r3, [sp, #20]
 800349a:	4638      	mov	r0, r7
 800349c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034a0:	3a30      	subs	r2, #48	; 0x30
 80034a2:	2a09      	cmp	r2, #9
 80034a4:	d903      	bls.n	80034ae <_svfiprintf_r+0x196>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0c8      	beq.n	800343c <_svfiprintf_r+0x124>
 80034aa:	9105      	str	r1, [sp, #20]
 80034ac:	e7c6      	b.n	800343c <_svfiprintf_r+0x124>
 80034ae:	fb05 2101 	mla	r1, r5, r1, r2
 80034b2:	2301      	movs	r3, #1
 80034b4:	4607      	mov	r7, r0
 80034b6:	e7f0      	b.n	800349a <_svfiprintf_r+0x182>
 80034b8:	ab03      	add	r3, sp, #12
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	4622      	mov	r2, r4
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <_svfiprintf_r+0x1ec>)
 80034c0:	a904      	add	r1, sp, #16
 80034c2:	4640      	mov	r0, r8
 80034c4:	f3af 8000 	nop.w
 80034c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034cc:	4681      	mov	r9, r0
 80034ce:	d1d6      	bne.n	800347e <_svfiprintf_r+0x166>
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	065b      	lsls	r3, r3, #25
 80034d4:	f53f af35 	bmi.w	8003342 <_svfiprintf_r+0x2a>
 80034d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034da:	b01d      	add	sp, #116	; 0x74
 80034dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e0:	ab03      	add	r3, sp, #12
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4622      	mov	r2, r4
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <_svfiprintf_r+0x1ec>)
 80034e8:	a904      	add	r1, sp, #16
 80034ea:	4640      	mov	r0, r8
 80034ec:	f000 f882 	bl	80035f4 <_printf_i>
 80034f0:	e7ea      	b.n	80034c8 <_svfiprintf_r+0x1b0>
 80034f2:	bf00      	nop
 80034f4:	08003ad0 	.word	0x08003ad0
 80034f8:	08003ad6 	.word	0x08003ad6
 80034fc:	08003ada 	.word	0x08003ada
 8003500:	00000000 	.word	0x00000000
 8003504:	08003265 	.word	0x08003265

08003508 <_printf_common>:
 8003508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800350c:	4691      	mov	r9, r2
 800350e:	461f      	mov	r7, r3
 8003510:	688a      	ldr	r2, [r1, #8]
 8003512:	690b      	ldr	r3, [r1, #16]
 8003514:	4606      	mov	r6, r0
 8003516:	4293      	cmp	r3, r2
 8003518:	bfb8      	it	lt
 800351a:	4613      	movlt	r3, r2
 800351c:	f8c9 3000 	str.w	r3, [r9]
 8003520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003524:	460c      	mov	r4, r1
 8003526:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800352a:	b112      	cbz	r2, 8003532 <_printf_common+0x2a>
 800352c:	3301      	adds	r3, #1
 800352e:	f8c9 3000 	str.w	r3, [r9]
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	0699      	lsls	r1, r3, #26
 8003536:	bf42      	ittt	mi
 8003538:	f8d9 3000 	ldrmi.w	r3, [r9]
 800353c:	3302      	addmi	r3, #2
 800353e:	f8c9 3000 	strmi.w	r3, [r9]
 8003542:	6825      	ldr	r5, [r4, #0]
 8003544:	f015 0506 	ands.w	r5, r5, #6
 8003548:	d107      	bne.n	800355a <_printf_common+0x52>
 800354a:	f104 0a19 	add.w	sl, r4, #25
 800354e:	68e3      	ldr	r3, [r4, #12]
 8003550:	f8d9 2000 	ldr.w	r2, [r9]
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	42ab      	cmp	r3, r5
 8003558:	dc29      	bgt.n	80035ae <_printf_common+0xa6>
 800355a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	3300      	adds	r3, #0
 8003562:	bf18      	it	ne
 8003564:	2301      	movne	r3, #1
 8003566:	0692      	lsls	r2, r2, #26
 8003568:	d42e      	bmi.n	80035c8 <_printf_common+0xc0>
 800356a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800356e:	4639      	mov	r1, r7
 8003570:	4630      	mov	r0, r6
 8003572:	47c0      	blx	r8
 8003574:	3001      	adds	r0, #1
 8003576:	d021      	beq.n	80035bc <_printf_common+0xb4>
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	68e5      	ldr	r5, [r4, #12]
 800357c:	f003 0306 	and.w	r3, r3, #6
 8003580:	2b04      	cmp	r3, #4
 8003582:	bf18      	it	ne
 8003584:	2500      	movne	r5, #0
 8003586:	f8d9 2000 	ldr.w	r2, [r9]
 800358a:	f04f 0900 	mov.w	r9, #0
 800358e:	bf08      	it	eq
 8003590:	1aad      	subeq	r5, r5, r2
 8003592:	68a3      	ldr	r3, [r4, #8]
 8003594:	6922      	ldr	r2, [r4, #16]
 8003596:	bf08      	it	eq
 8003598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800359c:	4293      	cmp	r3, r2
 800359e:	bfc4      	itt	gt
 80035a0:	1a9b      	subgt	r3, r3, r2
 80035a2:	18ed      	addgt	r5, r5, r3
 80035a4:	341a      	adds	r4, #26
 80035a6:	454d      	cmp	r5, r9
 80035a8:	d11a      	bne.n	80035e0 <_printf_common+0xd8>
 80035aa:	2000      	movs	r0, #0
 80035ac:	e008      	b.n	80035c0 <_printf_common+0xb8>
 80035ae:	2301      	movs	r3, #1
 80035b0:	4652      	mov	r2, sl
 80035b2:	4639      	mov	r1, r7
 80035b4:	4630      	mov	r0, r6
 80035b6:	47c0      	blx	r8
 80035b8:	3001      	adds	r0, #1
 80035ba:	d103      	bne.n	80035c4 <_printf_common+0xbc>
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c4:	3501      	adds	r5, #1
 80035c6:	e7c2      	b.n	800354e <_printf_common+0x46>
 80035c8:	2030      	movs	r0, #48	; 0x30
 80035ca:	18e1      	adds	r1, r4, r3
 80035cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035d6:	4422      	add	r2, r4
 80035d8:	3302      	adds	r3, #2
 80035da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035de:	e7c4      	b.n	800356a <_printf_common+0x62>
 80035e0:	2301      	movs	r3, #1
 80035e2:	4622      	mov	r2, r4
 80035e4:	4639      	mov	r1, r7
 80035e6:	4630      	mov	r0, r6
 80035e8:	47c0      	blx	r8
 80035ea:	3001      	adds	r0, #1
 80035ec:	d0e6      	beq.n	80035bc <_printf_common+0xb4>
 80035ee:	f109 0901 	add.w	r9, r9, #1
 80035f2:	e7d8      	b.n	80035a6 <_printf_common+0x9e>

080035f4 <_printf_i>:
 80035f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80035fc:	460c      	mov	r4, r1
 80035fe:	7e09      	ldrb	r1, [r1, #24]
 8003600:	b085      	sub	sp, #20
 8003602:	296e      	cmp	r1, #110	; 0x6e
 8003604:	4617      	mov	r7, r2
 8003606:	4606      	mov	r6, r0
 8003608:	4698      	mov	r8, r3
 800360a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800360c:	f000 80b3 	beq.w	8003776 <_printf_i+0x182>
 8003610:	d822      	bhi.n	8003658 <_printf_i+0x64>
 8003612:	2963      	cmp	r1, #99	; 0x63
 8003614:	d036      	beq.n	8003684 <_printf_i+0x90>
 8003616:	d80a      	bhi.n	800362e <_printf_i+0x3a>
 8003618:	2900      	cmp	r1, #0
 800361a:	f000 80b9 	beq.w	8003790 <_printf_i+0x19c>
 800361e:	2958      	cmp	r1, #88	; 0x58
 8003620:	f000 8083 	beq.w	800372a <_printf_i+0x136>
 8003624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003628:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800362c:	e032      	b.n	8003694 <_printf_i+0xa0>
 800362e:	2964      	cmp	r1, #100	; 0x64
 8003630:	d001      	beq.n	8003636 <_printf_i+0x42>
 8003632:	2969      	cmp	r1, #105	; 0x69
 8003634:	d1f6      	bne.n	8003624 <_printf_i+0x30>
 8003636:	6820      	ldr	r0, [r4, #0]
 8003638:	6813      	ldr	r3, [r2, #0]
 800363a:	0605      	lsls	r5, r0, #24
 800363c:	f103 0104 	add.w	r1, r3, #4
 8003640:	d52a      	bpl.n	8003698 <_printf_i+0xa4>
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6011      	str	r1, [r2, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	da03      	bge.n	8003652 <_printf_i+0x5e>
 800364a:	222d      	movs	r2, #45	; 0x2d
 800364c:	425b      	negs	r3, r3
 800364e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003652:	486f      	ldr	r0, [pc, #444]	; (8003810 <_printf_i+0x21c>)
 8003654:	220a      	movs	r2, #10
 8003656:	e039      	b.n	80036cc <_printf_i+0xd8>
 8003658:	2973      	cmp	r1, #115	; 0x73
 800365a:	f000 809d 	beq.w	8003798 <_printf_i+0x1a4>
 800365e:	d808      	bhi.n	8003672 <_printf_i+0x7e>
 8003660:	296f      	cmp	r1, #111	; 0x6f
 8003662:	d020      	beq.n	80036a6 <_printf_i+0xb2>
 8003664:	2970      	cmp	r1, #112	; 0x70
 8003666:	d1dd      	bne.n	8003624 <_printf_i+0x30>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f043 0320 	orr.w	r3, r3, #32
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	e003      	b.n	800367a <_printf_i+0x86>
 8003672:	2975      	cmp	r1, #117	; 0x75
 8003674:	d017      	beq.n	80036a6 <_printf_i+0xb2>
 8003676:	2978      	cmp	r1, #120	; 0x78
 8003678:	d1d4      	bne.n	8003624 <_printf_i+0x30>
 800367a:	2378      	movs	r3, #120	; 0x78
 800367c:	4865      	ldr	r0, [pc, #404]	; (8003814 <_printf_i+0x220>)
 800367e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003682:	e055      	b.n	8003730 <_printf_i+0x13c>
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800368a:	1d19      	adds	r1, r3, #4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6011      	str	r1, [r2, #0]
 8003690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003694:	2301      	movs	r3, #1
 8003696:	e08c      	b.n	80037b2 <_printf_i+0x1be>
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800369e:	6011      	str	r1, [r2, #0]
 80036a0:	bf18      	it	ne
 80036a2:	b21b      	sxthne	r3, r3
 80036a4:	e7cf      	b.n	8003646 <_printf_i+0x52>
 80036a6:	6813      	ldr	r3, [r2, #0]
 80036a8:	6825      	ldr	r5, [r4, #0]
 80036aa:	1d18      	adds	r0, r3, #4
 80036ac:	6010      	str	r0, [r2, #0]
 80036ae:	0628      	lsls	r0, r5, #24
 80036b0:	d501      	bpl.n	80036b6 <_printf_i+0xc2>
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	e002      	b.n	80036bc <_printf_i+0xc8>
 80036b6:	0668      	lsls	r0, r5, #25
 80036b8:	d5fb      	bpl.n	80036b2 <_printf_i+0xbe>
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	296f      	cmp	r1, #111	; 0x6f
 80036be:	bf14      	ite	ne
 80036c0:	220a      	movne	r2, #10
 80036c2:	2208      	moveq	r2, #8
 80036c4:	4852      	ldr	r0, [pc, #328]	; (8003810 <_printf_i+0x21c>)
 80036c6:	2100      	movs	r1, #0
 80036c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036cc:	6865      	ldr	r5, [r4, #4]
 80036ce:	2d00      	cmp	r5, #0
 80036d0:	60a5      	str	r5, [r4, #8]
 80036d2:	f2c0 8095 	blt.w	8003800 <_printf_i+0x20c>
 80036d6:	6821      	ldr	r1, [r4, #0]
 80036d8:	f021 0104 	bic.w	r1, r1, #4
 80036dc:	6021      	str	r1, [r4, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d13d      	bne.n	800375e <_printf_i+0x16a>
 80036e2:	2d00      	cmp	r5, #0
 80036e4:	f040 808e 	bne.w	8003804 <_printf_i+0x210>
 80036e8:	4665      	mov	r5, ip
 80036ea:	2a08      	cmp	r2, #8
 80036ec:	d10b      	bne.n	8003706 <_printf_i+0x112>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	07db      	lsls	r3, r3, #31
 80036f2:	d508      	bpl.n	8003706 <_printf_i+0x112>
 80036f4:	6923      	ldr	r3, [r4, #16]
 80036f6:	6862      	ldr	r2, [r4, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	bfde      	ittt	le
 80036fc:	2330      	movle	r3, #48	; 0x30
 80036fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003702:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003706:	ebac 0305 	sub.w	r3, ip, r5
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	f8cd 8000 	str.w	r8, [sp]
 8003710:	463b      	mov	r3, r7
 8003712:	aa03      	add	r2, sp, #12
 8003714:	4621      	mov	r1, r4
 8003716:	4630      	mov	r0, r6
 8003718:	f7ff fef6 	bl	8003508 <_printf_common>
 800371c:	3001      	adds	r0, #1
 800371e:	d14d      	bne.n	80037bc <_printf_i+0x1c8>
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	b005      	add	sp, #20
 8003726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800372a:	4839      	ldr	r0, [pc, #228]	; (8003810 <_printf_i+0x21c>)
 800372c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	6821      	ldr	r1, [r4, #0]
 8003734:	1d1d      	adds	r5, r3, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6015      	str	r5, [r2, #0]
 800373a:	060a      	lsls	r2, r1, #24
 800373c:	d50b      	bpl.n	8003756 <_printf_i+0x162>
 800373e:	07ca      	lsls	r2, r1, #31
 8003740:	bf44      	itt	mi
 8003742:	f041 0120 	orrmi.w	r1, r1, #32
 8003746:	6021      	strmi	r1, [r4, #0]
 8003748:	b91b      	cbnz	r3, 8003752 <_printf_i+0x15e>
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	f022 0220 	bic.w	r2, r2, #32
 8003750:	6022      	str	r2, [r4, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	e7b7      	b.n	80036c6 <_printf_i+0xd2>
 8003756:	064d      	lsls	r5, r1, #25
 8003758:	bf48      	it	mi
 800375a:	b29b      	uxthmi	r3, r3
 800375c:	e7ef      	b.n	800373e <_printf_i+0x14a>
 800375e:	4665      	mov	r5, ip
 8003760:	fbb3 f1f2 	udiv	r1, r3, r2
 8003764:	fb02 3311 	mls	r3, r2, r1, r3
 8003768:	5cc3      	ldrb	r3, [r0, r3]
 800376a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800376e:	460b      	mov	r3, r1
 8003770:	2900      	cmp	r1, #0
 8003772:	d1f5      	bne.n	8003760 <_printf_i+0x16c>
 8003774:	e7b9      	b.n	80036ea <_printf_i+0xf6>
 8003776:	6813      	ldr	r3, [r2, #0]
 8003778:	6825      	ldr	r5, [r4, #0]
 800377a:	1d18      	adds	r0, r3, #4
 800377c:	6961      	ldr	r1, [r4, #20]
 800377e:	6010      	str	r0, [r2, #0]
 8003780:	0628      	lsls	r0, r5, #24
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	d501      	bpl.n	800378a <_printf_i+0x196>
 8003786:	6019      	str	r1, [r3, #0]
 8003788:	e002      	b.n	8003790 <_printf_i+0x19c>
 800378a:	066a      	lsls	r2, r5, #25
 800378c:	d5fb      	bpl.n	8003786 <_printf_i+0x192>
 800378e:	8019      	strh	r1, [r3, #0]
 8003790:	2300      	movs	r3, #0
 8003792:	4665      	mov	r5, ip
 8003794:	6123      	str	r3, [r4, #16]
 8003796:	e7b9      	b.n	800370c <_printf_i+0x118>
 8003798:	6813      	ldr	r3, [r2, #0]
 800379a:	1d19      	adds	r1, r3, #4
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	681d      	ldr	r5, [r3, #0]
 80037a0:	6862      	ldr	r2, [r4, #4]
 80037a2:	2100      	movs	r1, #0
 80037a4:	4628      	mov	r0, r5
 80037a6:	f000 f837 	bl	8003818 <memchr>
 80037aa:	b108      	cbz	r0, 80037b0 <_printf_i+0x1bc>
 80037ac:	1b40      	subs	r0, r0, r5
 80037ae:	6060      	str	r0, [r4, #4]
 80037b0:	6863      	ldr	r3, [r4, #4]
 80037b2:	6123      	str	r3, [r4, #16]
 80037b4:	2300      	movs	r3, #0
 80037b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ba:	e7a7      	b.n	800370c <_printf_i+0x118>
 80037bc:	6923      	ldr	r3, [r4, #16]
 80037be:	462a      	mov	r2, r5
 80037c0:	4639      	mov	r1, r7
 80037c2:	4630      	mov	r0, r6
 80037c4:	47c0      	blx	r8
 80037c6:	3001      	adds	r0, #1
 80037c8:	d0aa      	beq.n	8003720 <_printf_i+0x12c>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	079b      	lsls	r3, r3, #30
 80037ce:	d413      	bmi.n	80037f8 <_printf_i+0x204>
 80037d0:	68e0      	ldr	r0, [r4, #12]
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	4298      	cmp	r0, r3
 80037d6:	bfb8      	it	lt
 80037d8:	4618      	movlt	r0, r3
 80037da:	e7a3      	b.n	8003724 <_printf_i+0x130>
 80037dc:	2301      	movs	r3, #1
 80037de:	464a      	mov	r2, r9
 80037e0:	4639      	mov	r1, r7
 80037e2:	4630      	mov	r0, r6
 80037e4:	47c0      	blx	r8
 80037e6:	3001      	adds	r0, #1
 80037e8:	d09a      	beq.n	8003720 <_printf_i+0x12c>
 80037ea:	3501      	adds	r5, #1
 80037ec:	68e3      	ldr	r3, [r4, #12]
 80037ee:	9a03      	ldr	r2, [sp, #12]
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	42ab      	cmp	r3, r5
 80037f4:	dcf2      	bgt.n	80037dc <_printf_i+0x1e8>
 80037f6:	e7eb      	b.n	80037d0 <_printf_i+0x1dc>
 80037f8:	2500      	movs	r5, #0
 80037fa:	f104 0919 	add.w	r9, r4, #25
 80037fe:	e7f5      	b.n	80037ec <_printf_i+0x1f8>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ac      	bne.n	800375e <_printf_i+0x16a>
 8003804:	7803      	ldrb	r3, [r0, #0]
 8003806:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800380a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800380e:	e76c      	b.n	80036ea <_printf_i+0xf6>
 8003810:	08003ae1 	.word	0x08003ae1
 8003814:	08003af2 	.word	0x08003af2

08003818 <memchr>:
 8003818:	b510      	push	{r4, lr}
 800381a:	b2c9      	uxtb	r1, r1
 800381c:	4402      	add	r2, r0
 800381e:	4290      	cmp	r0, r2
 8003820:	4603      	mov	r3, r0
 8003822:	d101      	bne.n	8003828 <memchr+0x10>
 8003824:	2300      	movs	r3, #0
 8003826:	e003      	b.n	8003830 <memchr+0x18>
 8003828:	781c      	ldrb	r4, [r3, #0]
 800382a:	3001      	adds	r0, #1
 800382c:	428c      	cmp	r4, r1
 800382e:	d1f6      	bne.n	800381e <memchr+0x6>
 8003830:	4618      	mov	r0, r3
 8003832:	bd10      	pop	{r4, pc}

08003834 <memcpy>:
 8003834:	b510      	push	{r4, lr}
 8003836:	1e43      	subs	r3, r0, #1
 8003838:	440a      	add	r2, r1
 800383a:	4291      	cmp	r1, r2
 800383c:	d100      	bne.n	8003840 <memcpy+0xc>
 800383e:	bd10      	pop	{r4, pc}
 8003840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003848:	e7f7      	b.n	800383a <memcpy+0x6>

0800384a <memmove>:
 800384a:	4288      	cmp	r0, r1
 800384c:	b510      	push	{r4, lr}
 800384e:	eb01 0302 	add.w	r3, r1, r2
 8003852:	d807      	bhi.n	8003864 <memmove+0x1a>
 8003854:	1e42      	subs	r2, r0, #1
 8003856:	4299      	cmp	r1, r3
 8003858:	d00a      	beq.n	8003870 <memmove+0x26>
 800385a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800385e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003862:	e7f8      	b.n	8003856 <memmove+0xc>
 8003864:	4283      	cmp	r3, r0
 8003866:	d9f5      	bls.n	8003854 <memmove+0xa>
 8003868:	1881      	adds	r1, r0, r2
 800386a:	1ad2      	subs	r2, r2, r3
 800386c:	42d3      	cmn	r3, r2
 800386e:	d100      	bne.n	8003872 <memmove+0x28>
 8003870:	bd10      	pop	{r4, pc}
 8003872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003876:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800387a:	e7f7      	b.n	800386c <memmove+0x22>

0800387c <_free_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4605      	mov	r5, r0
 8003880:	2900      	cmp	r1, #0
 8003882:	d043      	beq.n	800390c <_free_r+0x90>
 8003884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003888:	1f0c      	subs	r4, r1, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	bfb8      	it	lt
 800388e:	18e4      	addlt	r4, r4, r3
 8003890:	f000 f8d0 	bl	8003a34 <__malloc_lock>
 8003894:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <_free_r+0x94>)
 8003896:	6813      	ldr	r3, [r2, #0]
 8003898:	4610      	mov	r0, r2
 800389a:	b933      	cbnz	r3, 80038aa <_free_r+0x2e>
 800389c:	6063      	str	r3, [r4, #4]
 800389e:	6014      	str	r4, [r2, #0]
 80038a0:	4628      	mov	r0, r5
 80038a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a6:	f000 b8c6 	b.w	8003a36 <__malloc_unlock>
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	d90b      	bls.n	80038c6 <_free_r+0x4a>
 80038ae:	6821      	ldr	r1, [r4, #0]
 80038b0:	1862      	adds	r2, r4, r1
 80038b2:	4293      	cmp	r3, r2
 80038b4:	bf01      	itttt	eq
 80038b6:	681a      	ldreq	r2, [r3, #0]
 80038b8:	685b      	ldreq	r3, [r3, #4]
 80038ba:	1852      	addeq	r2, r2, r1
 80038bc:	6022      	streq	r2, [r4, #0]
 80038be:	6063      	str	r3, [r4, #4]
 80038c0:	6004      	str	r4, [r0, #0]
 80038c2:	e7ed      	b.n	80038a0 <_free_r+0x24>
 80038c4:	4613      	mov	r3, r2
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	b10a      	cbz	r2, 80038ce <_free_r+0x52>
 80038ca:	42a2      	cmp	r2, r4
 80038cc:	d9fa      	bls.n	80038c4 <_free_r+0x48>
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	1858      	adds	r0, r3, r1
 80038d2:	42a0      	cmp	r0, r4
 80038d4:	d10b      	bne.n	80038ee <_free_r+0x72>
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	4401      	add	r1, r0
 80038da:	1858      	adds	r0, r3, r1
 80038dc:	4282      	cmp	r2, r0
 80038de:	6019      	str	r1, [r3, #0]
 80038e0:	d1de      	bne.n	80038a0 <_free_r+0x24>
 80038e2:	6810      	ldr	r0, [r2, #0]
 80038e4:	6852      	ldr	r2, [r2, #4]
 80038e6:	4401      	add	r1, r0
 80038e8:	6019      	str	r1, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	e7d8      	b.n	80038a0 <_free_r+0x24>
 80038ee:	d902      	bls.n	80038f6 <_free_r+0x7a>
 80038f0:	230c      	movs	r3, #12
 80038f2:	602b      	str	r3, [r5, #0]
 80038f4:	e7d4      	b.n	80038a0 <_free_r+0x24>
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	1821      	adds	r1, r4, r0
 80038fa:	428a      	cmp	r2, r1
 80038fc:	bf01      	itttt	eq
 80038fe:	6811      	ldreq	r1, [r2, #0]
 8003900:	6852      	ldreq	r2, [r2, #4]
 8003902:	1809      	addeq	r1, r1, r0
 8003904:	6021      	streq	r1, [r4, #0]
 8003906:	6062      	str	r2, [r4, #4]
 8003908:	605c      	str	r4, [r3, #4]
 800390a:	e7c9      	b.n	80038a0 <_free_r+0x24>
 800390c:	bd38      	pop	{r3, r4, r5, pc}
 800390e:	bf00      	nop
 8003910:	200000a8 	.word	0x200000a8

08003914 <_malloc_r>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	1ccd      	adds	r5, r1, #3
 8003918:	f025 0503 	bic.w	r5, r5, #3
 800391c:	3508      	adds	r5, #8
 800391e:	2d0c      	cmp	r5, #12
 8003920:	bf38      	it	cc
 8003922:	250c      	movcc	r5, #12
 8003924:	2d00      	cmp	r5, #0
 8003926:	4606      	mov	r6, r0
 8003928:	db01      	blt.n	800392e <_malloc_r+0x1a>
 800392a:	42a9      	cmp	r1, r5
 800392c:	d903      	bls.n	8003936 <_malloc_r+0x22>
 800392e:	230c      	movs	r3, #12
 8003930:	6033      	str	r3, [r6, #0]
 8003932:	2000      	movs	r0, #0
 8003934:	bd70      	pop	{r4, r5, r6, pc}
 8003936:	f000 f87d 	bl	8003a34 <__malloc_lock>
 800393a:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <_malloc_r+0xac>)
 800393c:	6814      	ldr	r4, [r2, #0]
 800393e:	4621      	mov	r1, r4
 8003940:	b991      	cbnz	r1, 8003968 <_malloc_r+0x54>
 8003942:	4c20      	ldr	r4, [pc, #128]	; (80039c4 <_malloc_r+0xb0>)
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	b91b      	cbnz	r3, 8003950 <_malloc_r+0x3c>
 8003948:	4630      	mov	r0, r6
 800394a:	f000 f863 	bl	8003a14 <_sbrk_r>
 800394e:	6020      	str	r0, [r4, #0]
 8003950:	4629      	mov	r1, r5
 8003952:	4630      	mov	r0, r6
 8003954:	f000 f85e 	bl	8003a14 <_sbrk_r>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d124      	bne.n	80039a6 <_malloc_r+0x92>
 800395c:	230c      	movs	r3, #12
 800395e:	4630      	mov	r0, r6
 8003960:	6033      	str	r3, [r6, #0]
 8003962:	f000 f868 	bl	8003a36 <__malloc_unlock>
 8003966:	e7e4      	b.n	8003932 <_malloc_r+0x1e>
 8003968:	680b      	ldr	r3, [r1, #0]
 800396a:	1b5b      	subs	r3, r3, r5
 800396c:	d418      	bmi.n	80039a0 <_malloc_r+0x8c>
 800396e:	2b0b      	cmp	r3, #11
 8003970:	d90f      	bls.n	8003992 <_malloc_r+0x7e>
 8003972:	600b      	str	r3, [r1, #0]
 8003974:	18cc      	adds	r4, r1, r3
 8003976:	50cd      	str	r5, [r1, r3]
 8003978:	4630      	mov	r0, r6
 800397a:	f000 f85c 	bl	8003a36 <__malloc_unlock>
 800397e:	f104 000b 	add.w	r0, r4, #11
 8003982:	1d23      	adds	r3, r4, #4
 8003984:	f020 0007 	bic.w	r0, r0, #7
 8003988:	1ac3      	subs	r3, r0, r3
 800398a:	d0d3      	beq.n	8003934 <_malloc_r+0x20>
 800398c:	425a      	negs	r2, r3
 800398e:	50e2      	str	r2, [r4, r3]
 8003990:	e7d0      	b.n	8003934 <_malloc_r+0x20>
 8003992:	684b      	ldr	r3, [r1, #4]
 8003994:	428c      	cmp	r4, r1
 8003996:	bf16      	itet	ne
 8003998:	6063      	strne	r3, [r4, #4]
 800399a:	6013      	streq	r3, [r2, #0]
 800399c:	460c      	movne	r4, r1
 800399e:	e7eb      	b.n	8003978 <_malloc_r+0x64>
 80039a0:	460c      	mov	r4, r1
 80039a2:	6849      	ldr	r1, [r1, #4]
 80039a4:	e7cc      	b.n	8003940 <_malloc_r+0x2c>
 80039a6:	1cc4      	adds	r4, r0, #3
 80039a8:	f024 0403 	bic.w	r4, r4, #3
 80039ac:	42a0      	cmp	r0, r4
 80039ae:	d005      	beq.n	80039bc <_malloc_r+0xa8>
 80039b0:	1a21      	subs	r1, r4, r0
 80039b2:	4630      	mov	r0, r6
 80039b4:	f000 f82e 	bl	8003a14 <_sbrk_r>
 80039b8:	3001      	adds	r0, #1
 80039ba:	d0cf      	beq.n	800395c <_malloc_r+0x48>
 80039bc:	6025      	str	r5, [r4, #0]
 80039be:	e7db      	b.n	8003978 <_malloc_r+0x64>
 80039c0:	200000a8 	.word	0x200000a8
 80039c4:	200000ac 	.word	0x200000ac

080039c8 <_realloc_r>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	4607      	mov	r7, r0
 80039cc:	4614      	mov	r4, r2
 80039ce:	460e      	mov	r6, r1
 80039d0:	b921      	cbnz	r1, 80039dc <_realloc_r+0x14>
 80039d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039d6:	4611      	mov	r1, r2
 80039d8:	f7ff bf9c 	b.w	8003914 <_malloc_r>
 80039dc:	b922      	cbnz	r2, 80039e8 <_realloc_r+0x20>
 80039de:	f7ff ff4d 	bl	800387c <_free_r>
 80039e2:	4625      	mov	r5, r4
 80039e4:	4628      	mov	r0, r5
 80039e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e8:	f000 f826 	bl	8003a38 <_malloc_usable_size_r>
 80039ec:	42a0      	cmp	r0, r4
 80039ee:	d20f      	bcs.n	8003a10 <_realloc_r+0x48>
 80039f0:	4621      	mov	r1, r4
 80039f2:	4638      	mov	r0, r7
 80039f4:	f7ff ff8e 	bl	8003914 <_malloc_r>
 80039f8:	4605      	mov	r5, r0
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d0f2      	beq.n	80039e4 <_realloc_r+0x1c>
 80039fe:	4631      	mov	r1, r6
 8003a00:	4622      	mov	r2, r4
 8003a02:	f7ff ff17 	bl	8003834 <memcpy>
 8003a06:	4631      	mov	r1, r6
 8003a08:	4638      	mov	r0, r7
 8003a0a:	f7ff ff37 	bl	800387c <_free_r>
 8003a0e:	e7e9      	b.n	80039e4 <_realloc_r+0x1c>
 8003a10:	4635      	mov	r5, r6
 8003a12:	e7e7      	b.n	80039e4 <_realloc_r+0x1c>

08003a14 <_sbrk_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	2300      	movs	r3, #0
 8003a18:	4c05      	ldr	r4, [pc, #20]	; (8003a30 <_sbrk_r+0x1c>)
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	6023      	str	r3, [r4, #0]
 8003a20:	f7ff fb48 	bl	80030b4 <_sbrk>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_sbrk_r+0x1a>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_sbrk_r+0x1a>
 8003a2c:	602b      	str	r3, [r5, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20000218 	.word	0x20000218

08003a34 <__malloc_lock>:
 8003a34:	4770      	bx	lr

08003a36 <__malloc_unlock>:
 8003a36:	4770      	bx	lr

08003a38 <_malloc_usable_size_r>:
 8003a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a3c:	1f18      	subs	r0, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bfbc      	itt	lt
 8003a42:	580b      	ldrlt	r3, [r1, r0]
 8003a44:	18c0      	addlt	r0, r0, r3
 8003a46:	4770      	bx	lr

08003a48 <_init>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr

08003a54 <_fini>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr
